
MorseCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000350c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080036a0  080036a0  000136a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037c0  080037c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080037c0  080037c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037c0  080037c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037c0  080037c0  000137c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037c4  080037c4  000137c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000008c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000098  20000098  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a3ee  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a99  00000000  00000000  0002a46d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009f8  00000000  00000000  0002bf08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007ae  00000000  00000000  0002c900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002000d  00000000  00000000  0002d0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d470  00000000  00000000  0004d0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4ba7  00000000  00000000  0005a52b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000290c  00000000  00000000  0011f0d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  001219e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003688 	.word	0x08003688

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003688 	.word	0x08003688

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 80001f2:	4b09      	ldr	r3, [pc, #36]	; (8000218 <delay+0x30>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	2200      	movs	r2, #0
 80001f8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 80001fa:	bf00      	nop
 80001fc:	4b06      	ldr	r3, [pc, #24]	; (8000218 <delay+0x30>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000202:	88fb      	ldrh	r3, [r7, #6]
 8000204:	429a      	cmp	r2, r3
 8000206:	d3f9      	bcc.n	80001fc <delay+0x14>
}
 8000208:	bf00      	nop
 800020a:	bf00      	nop
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	20000028 	.word	0x20000028

0800021c <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	6039      	str	r1, [r7, #0]
 8000226:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	b2db      	uxtb	r3, r3
 800022c:	461a      	mov	r2, r3
 800022e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000236:	f001 f8cf 	bl	80013d8 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	08db      	lsrs	r3, r3, #3
 800023e:	b2db      	uxtb	r3, r3
 8000240:	f003 0301 	and.w	r3, r3, #1
 8000244:	b2db      	uxtb	r3, r3
 8000246:	461a      	mov	r2, r3
 8000248:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800024c:	481c      	ldr	r0, [pc, #112]	; (80002c0 <send_to_lcd+0xa4>)
 800024e:	f001 f8c3 	bl	80013d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	089b      	lsrs	r3, r3, #2
 8000256:	b2db      	uxtb	r3, r3
 8000258:	f003 0301 	and.w	r3, r3, #1
 800025c:	b2db      	uxtb	r3, r3
 800025e:	461a      	mov	r2, r3
 8000260:	2110      	movs	r1, #16
 8000262:	4817      	ldr	r0, [pc, #92]	; (80002c0 <send_to_lcd+0xa4>)
 8000264:	f001 f8b8 	bl	80013d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	085b      	lsrs	r3, r3, #1
 800026c:	b2db      	uxtb	r3, r3
 800026e:	f003 0301 	and.w	r3, r3, #1
 8000272:	b2db      	uxtb	r3, r3
 8000274:	461a      	mov	r2, r3
 8000276:	2120      	movs	r1, #32
 8000278:	4811      	ldr	r0, [pc, #68]	; (80002c0 <send_to_lcd+0xa4>)
 800027a:	f001 f8ad 	bl	80013d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	f003 0301 	and.w	r3, r3, #1
 8000284:	b2db      	uxtb	r3, r3
 8000286:	461a      	mov	r2, r3
 8000288:	2108      	movs	r1, #8
 800028a:	480d      	ldr	r0, [pc, #52]	; (80002c0 <send_to_lcd+0xa4>)
 800028c:	f001 f8a4 	bl	80013d8 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000290:	2201      	movs	r2, #1
 8000292:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800029a:	f001 f89d 	bl	80013d8 <HAL_GPIO_WritePin>
	delay (20);
 800029e:	2014      	movs	r0, #20
 80002a0:	f7ff ffa2 	bl	80001e8 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80002a4:	2200      	movs	r2, #0
 80002a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ae:	f001 f893 	bl	80013d8 <HAL_GPIO_WritePin>
	delay (20);
 80002b2:	2014      	movs	r0, #20
 80002b4:	f7ff ff98 	bl	80001e8 <delay>
}
 80002b8:	bf00      	nop
 80002ba:	3708      	adds	r7, #8
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	48000400 	.word	0x48000400

080002c4 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	091b      	lsrs	r3, r3, #4
 80002d2:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80002d4:	7bfb      	ldrb	r3, [r7, #15]
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f7ff ff9f 	bl	800021c <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	f003 030f 	and.w	r3, r3, #15
 80002e4:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 80002e6:	7bfb      	ldrb	r3, [r7, #15]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f7ff ff96 	bl	800021c <send_to_lcd>
}
 80002f0:	bf00      	nop
 80002f2:	3710      	adds	r7, #16
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	091b      	lsrs	r3, r3, #4
 8000306:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000308:	7bfb      	ldrb	r3, [r7, #15]
 800030a:	2101      	movs	r1, #1
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ff85 	bl	800021c <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	f003 030f 	and.w	r3, r3, #15
 8000318:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 800031a:	7bfb      	ldrb	r3, [r7, #15]
 800031c:	2101      	movs	r1, #1
 800031e:	4618      	mov	r0, r3
 8000320:	f7ff ff7c 	bl	800021c <send_to_lcd>
}
 8000324:	bf00      	nop
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <lcd_put_cur>:
	lcd_send_cmd(0x01);
	HAL_Delay(2);
}

void lcd_put_cur(int row, int col)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	6039      	str	r1, [r7, #0]
    switch (row)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d003      	beq.n	8000344 <lcd_put_cur+0x18>
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d005      	beq.n	800034e <lcd_put_cur+0x22>
 8000342:	e009      	b.n	8000358 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800034a:	603b      	str	r3, [r7, #0]
            break;
 800034c:	e004      	b.n	8000358 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000354:	603b      	str	r3, [r7, #0]
            break;
 8000356:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	b2db      	uxtb	r3, r3
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ffb1 	bl	80002c4 <lcd_send_cmd>
}
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}

0800036a <lcd_init>:


void lcd_init (void)
{
 800036a:	b580      	push	{r7, lr}
 800036c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800036e:	2032      	movs	r0, #50	; 0x32
 8000370:	f000 fd5a 	bl	8000e28 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000374:	2030      	movs	r0, #48	; 0x30
 8000376:	f7ff ffa5 	bl	80002c4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800037a:	2005      	movs	r0, #5
 800037c:	f000 fd54 	bl	8000e28 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000380:	2030      	movs	r0, #48	; 0x30
 8000382:	f7ff ff9f 	bl	80002c4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000386:	2001      	movs	r0, #1
 8000388:	f000 fd4e 	bl	8000e28 <HAL_Delay>
	lcd_send_cmd (0x30);
 800038c:	2030      	movs	r0, #48	; 0x30
 800038e:	f7ff ff99 	bl	80002c4 <lcd_send_cmd>
	HAL_Delay(10);
 8000392:	200a      	movs	r0, #10
 8000394:	f000 fd48 	bl	8000e28 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000398:	2020      	movs	r0, #32
 800039a:	f7ff ff93 	bl	80002c4 <lcd_send_cmd>
	HAL_Delay(10);
 800039e:	200a      	movs	r0, #10
 80003a0:	f000 fd42 	bl	8000e28 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80003a4:	2028      	movs	r0, #40	; 0x28
 80003a6:	f7ff ff8d 	bl	80002c4 <lcd_send_cmd>
	HAL_Delay(1);
 80003aa:	2001      	movs	r0, #1
 80003ac:	f000 fd3c 	bl	8000e28 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80003b0:	2008      	movs	r0, #8
 80003b2:	f7ff ff87 	bl	80002c4 <lcd_send_cmd>
	HAL_Delay(1);
 80003b6:	2001      	movs	r0, #1
 80003b8:	f000 fd36 	bl	8000e28 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80003bc:	2001      	movs	r0, #1
 80003be:	f7ff ff81 	bl	80002c4 <lcd_send_cmd>
	HAL_Delay(1);
 80003c2:	2001      	movs	r0, #1
 80003c4:	f000 fd30 	bl	8000e28 <HAL_Delay>
	HAL_Delay(1);
 80003c8:	2001      	movs	r0, #1
 80003ca:	f000 fd2d 	bl	8000e28 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80003ce:	2006      	movs	r0, #6
 80003d0:	f7ff ff78 	bl	80002c4 <lcd_send_cmd>
	HAL_Delay(1);
 80003d4:	2001      	movs	r0, #1
 80003d6:	f000 fd27 	bl	8000e28 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80003da:	200c      	movs	r0, #12
 80003dc:	f7ff ff72 	bl	80002c4 <lcd_send_cmd>
}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80003ec:	e006      	b.n	80003fc <lcd_send_string+0x18>
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	1c5a      	adds	r2, r3, #1
 80003f2:	607a      	str	r2, [r7, #4]
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff7e 	bl	80002f8 <lcd_send_data>
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d1f4      	bne.n	80003ee <lcd_send_string+0xa>
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
	...

08000410 <decodeMorse>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char decodeMorse(char code[]) {
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  // Morse code to English alphabet mapping
  if (!strcmp(code,".-")) return 'A';
 8000418:	49a1      	ldr	r1, [pc, #644]	; (80006a0 <decodeMorse+0x290>)
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f7ff feda 	bl	80001d4 <strcmp>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d101      	bne.n	800042a <decodeMorse+0x1a>
 8000426:	2341      	movs	r3, #65	; 0x41
 8000428:	e183      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"-...")) return 'B';
 800042a:	499e      	ldr	r1, [pc, #632]	; (80006a4 <decodeMorse+0x294>)
 800042c:	6878      	ldr	r0, [r7, #4]
 800042e:	f7ff fed1 	bl	80001d4 <strcmp>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d101      	bne.n	800043c <decodeMorse+0x2c>
 8000438:	2342      	movs	r3, #66	; 0x42
 800043a:	e17a      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"-.-.")) return 'C';
 800043c:	499a      	ldr	r1, [pc, #616]	; (80006a8 <decodeMorse+0x298>)
 800043e:	6878      	ldr	r0, [r7, #4]
 8000440:	f7ff fec8 	bl	80001d4 <strcmp>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d101      	bne.n	800044e <decodeMorse+0x3e>
 800044a:	2343      	movs	r3, #67	; 0x43
 800044c:	e171      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"-..")) return 'D';
 800044e:	4997      	ldr	r1, [pc, #604]	; (80006ac <decodeMorse+0x29c>)
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f7ff febf 	bl	80001d4 <strcmp>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d101      	bne.n	8000460 <decodeMorse+0x50>
 800045c:	2344      	movs	r3, #68	; 0x44
 800045e:	e168      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,".")) return 'E';
 8000460:	4993      	ldr	r1, [pc, #588]	; (80006b0 <decodeMorse+0x2a0>)
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f7ff feb6 	bl	80001d4 <strcmp>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d101      	bne.n	8000472 <decodeMorse+0x62>
 800046e:	2345      	movs	r3, #69	; 0x45
 8000470:	e15f      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"..-.")) return 'F';
 8000472:	4990      	ldr	r1, [pc, #576]	; (80006b4 <decodeMorse+0x2a4>)
 8000474:	6878      	ldr	r0, [r7, #4]
 8000476:	f7ff fead 	bl	80001d4 <strcmp>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d101      	bne.n	8000484 <decodeMorse+0x74>
 8000480:	2346      	movs	r3, #70	; 0x46
 8000482:	e156      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"--.")) return 'G';
 8000484:	498c      	ldr	r1, [pc, #560]	; (80006b8 <decodeMorse+0x2a8>)
 8000486:	6878      	ldr	r0, [r7, #4]
 8000488:	f7ff fea4 	bl	80001d4 <strcmp>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d101      	bne.n	8000496 <decodeMorse+0x86>
 8000492:	2347      	movs	r3, #71	; 0x47
 8000494:	e14d      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"....")) return 'H';
 8000496:	4989      	ldr	r1, [pc, #548]	; (80006bc <decodeMorse+0x2ac>)
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f7ff fe9b 	bl	80001d4 <strcmp>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d101      	bne.n	80004a8 <decodeMorse+0x98>
 80004a4:	2348      	movs	r3, #72	; 0x48
 80004a6:	e144      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"..")) return 'I';
 80004a8:	4985      	ldr	r1, [pc, #532]	; (80006c0 <decodeMorse+0x2b0>)
 80004aa:	6878      	ldr	r0, [r7, #4]
 80004ac:	f7ff fe92 	bl	80001d4 <strcmp>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d101      	bne.n	80004ba <decodeMorse+0xaa>
 80004b6:	2349      	movs	r3, #73	; 0x49
 80004b8:	e13b      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,".---")) return 'J';
 80004ba:	4982      	ldr	r1, [pc, #520]	; (80006c4 <decodeMorse+0x2b4>)
 80004bc:	6878      	ldr	r0, [r7, #4]
 80004be:	f7ff fe89 	bl	80001d4 <strcmp>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d101      	bne.n	80004cc <decodeMorse+0xbc>
 80004c8:	234a      	movs	r3, #74	; 0x4a
 80004ca:	e132      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"-.-")) return 'K';
 80004cc:	497e      	ldr	r1, [pc, #504]	; (80006c8 <decodeMorse+0x2b8>)
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f7ff fe80 	bl	80001d4 <strcmp>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d101      	bne.n	80004de <decodeMorse+0xce>
 80004da:	234b      	movs	r3, #75	; 0x4b
 80004dc:	e129      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,".-..")) return 'L';
 80004de:	497b      	ldr	r1, [pc, #492]	; (80006cc <decodeMorse+0x2bc>)
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f7ff fe77 	bl	80001d4 <strcmp>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d101      	bne.n	80004f0 <decodeMorse+0xe0>
 80004ec:	234c      	movs	r3, #76	; 0x4c
 80004ee:	e120      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"--")) return 'M';
 80004f0:	4977      	ldr	r1, [pc, #476]	; (80006d0 <decodeMorse+0x2c0>)
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f7ff fe6e 	bl	80001d4 <strcmp>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d101      	bne.n	8000502 <decodeMorse+0xf2>
 80004fe:	234d      	movs	r3, #77	; 0x4d
 8000500:	e117      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"-.")) return 'N';
 8000502:	4974      	ldr	r1, [pc, #464]	; (80006d4 <decodeMorse+0x2c4>)
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f7ff fe65 	bl	80001d4 <strcmp>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d101      	bne.n	8000514 <decodeMorse+0x104>
 8000510:	234e      	movs	r3, #78	; 0x4e
 8000512:	e10e      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"---")) return 'O';
 8000514:	4970      	ldr	r1, [pc, #448]	; (80006d8 <decodeMorse+0x2c8>)
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f7ff fe5c 	bl	80001d4 <strcmp>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d101      	bne.n	8000526 <decodeMorse+0x116>
 8000522:	234f      	movs	r3, #79	; 0x4f
 8000524:	e105      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,".--.")) return 'P';
 8000526:	496d      	ldr	r1, [pc, #436]	; (80006dc <decodeMorse+0x2cc>)
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f7ff fe53 	bl	80001d4 <strcmp>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d101      	bne.n	8000538 <decodeMorse+0x128>
 8000534:	2350      	movs	r3, #80	; 0x50
 8000536:	e0fc      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"--.-")) return 'Q';
 8000538:	4969      	ldr	r1, [pc, #420]	; (80006e0 <decodeMorse+0x2d0>)
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f7ff fe4a 	bl	80001d4 <strcmp>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d101      	bne.n	800054a <decodeMorse+0x13a>
 8000546:	2351      	movs	r3, #81	; 0x51
 8000548:	e0f3      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,".-.")) return 'R';
 800054a:	4966      	ldr	r1, [pc, #408]	; (80006e4 <decodeMorse+0x2d4>)
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f7ff fe41 	bl	80001d4 <strcmp>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d101      	bne.n	800055c <decodeMorse+0x14c>
 8000558:	2352      	movs	r3, #82	; 0x52
 800055a:	e0ea      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"...")) return 'S';
 800055c:	4962      	ldr	r1, [pc, #392]	; (80006e8 <decodeMorse+0x2d8>)
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f7ff fe38 	bl	80001d4 <strcmp>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d101      	bne.n	800056e <decodeMorse+0x15e>
 800056a:	2353      	movs	r3, #83	; 0x53
 800056c:	e0e1      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"-")) return 'T';
 800056e:	495f      	ldr	r1, [pc, #380]	; (80006ec <decodeMorse+0x2dc>)
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f7ff fe2f 	bl	80001d4 <strcmp>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d101      	bne.n	8000580 <decodeMorse+0x170>
 800057c:	2354      	movs	r3, #84	; 0x54
 800057e:	e0d8      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"..-")) return 'U';
 8000580:	495b      	ldr	r1, [pc, #364]	; (80006f0 <decodeMorse+0x2e0>)
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f7ff fe26 	bl	80001d4 <strcmp>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d101      	bne.n	8000592 <decodeMorse+0x182>
 800058e:	2355      	movs	r3, #85	; 0x55
 8000590:	e0cf      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"...-")) return 'V';
 8000592:	4958      	ldr	r1, [pc, #352]	; (80006f4 <decodeMorse+0x2e4>)
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f7ff fe1d 	bl	80001d4 <strcmp>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d101      	bne.n	80005a4 <decodeMorse+0x194>
 80005a0:	2356      	movs	r3, #86	; 0x56
 80005a2:	e0c6      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,".--")) return 'W';
 80005a4:	4954      	ldr	r1, [pc, #336]	; (80006f8 <decodeMorse+0x2e8>)
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f7ff fe14 	bl	80001d4 <strcmp>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d101      	bne.n	80005b6 <decodeMorse+0x1a6>
 80005b2:	2357      	movs	r3, #87	; 0x57
 80005b4:	e0bd      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"-..-")) return 'X';
 80005b6:	4951      	ldr	r1, [pc, #324]	; (80006fc <decodeMorse+0x2ec>)
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff fe0b 	bl	80001d4 <strcmp>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d101      	bne.n	80005c8 <decodeMorse+0x1b8>
 80005c4:	2358      	movs	r3, #88	; 0x58
 80005c6:	e0b4      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"-.--")) return 'Y';
 80005c8:	494d      	ldr	r1, [pc, #308]	; (8000700 <decodeMorse+0x2f0>)
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f7ff fe02 	bl	80001d4 <strcmp>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d101      	bne.n	80005da <decodeMorse+0x1ca>
 80005d6:	2359      	movs	r3, #89	; 0x59
 80005d8:	e0ab      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"--..")) return 'Z';
 80005da:	494a      	ldr	r1, [pc, #296]	; (8000704 <decodeMorse+0x2f4>)
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f7ff fdf9 	bl	80001d4 <strcmp>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d101      	bne.n	80005ec <decodeMorse+0x1dc>
 80005e8:	235a      	movs	r3, #90	; 0x5a
 80005ea:	e0a2      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"-----")) return '0';
 80005ec:	4946      	ldr	r1, [pc, #280]	; (8000708 <decodeMorse+0x2f8>)
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f7ff fdf0 	bl	80001d4 <strcmp>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d101      	bne.n	80005fe <decodeMorse+0x1ee>
 80005fa:	2330      	movs	r3, #48	; 0x30
 80005fc:	e099      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,".----")) return '1';
 80005fe:	4943      	ldr	r1, [pc, #268]	; (800070c <decodeMorse+0x2fc>)
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f7ff fde7 	bl	80001d4 <strcmp>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d101      	bne.n	8000610 <decodeMorse+0x200>
 800060c:	2331      	movs	r3, #49	; 0x31
 800060e:	e090      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"..---")) return '2';
 8000610:	493f      	ldr	r1, [pc, #252]	; (8000710 <decodeMorse+0x300>)
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f7ff fdde 	bl	80001d4 <strcmp>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d101      	bne.n	8000622 <decodeMorse+0x212>
 800061e:	2332      	movs	r3, #50	; 0x32
 8000620:	e087      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"...--")) return '3';
 8000622:	493c      	ldr	r1, [pc, #240]	; (8000714 <decodeMorse+0x304>)
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f7ff fdd5 	bl	80001d4 <strcmp>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d101      	bne.n	8000634 <decodeMorse+0x224>
 8000630:	2333      	movs	r3, #51	; 0x33
 8000632:	e07e      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"....-")) return '4';
 8000634:	4938      	ldr	r1, [pc, #224]	; (8000718 <decodeMorse+0x308>)
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f7ff fdcc 	bl	80001d4 <strcmp>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d101      	bne.n	8000646 <decodeMorse+0x236>
 8000642:	2334      	movs	r3, #52	; 0x34
 8000644:	e075      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,".....")) return '5';
 8000646:	4935      	ldr	r1, [pc, #212]	; (800071c <decodeMorse+0x30c>)
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff fdc3 	bl	80001d4 <strcmp>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d101      	bne.n	8000658 <decodeMorse+0x248>
 8000654:	2335      	movs	r3, #53	; 0x35
 8000656:	e06c      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"-....")) return '6';
 8000658:	4931      	ldr	r1, [pc, #196]	; (8000720 <decodeMorse+0x310>)
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f7ff fdba 	bl	80001d4 <strcmp>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d101      	bne.n	800066a <decodeMorse+0x25a>
 8000666:	2336      	movs	r3, #54	; 0x36
 8000668:	e063      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"--...")) return '7';
 800066a:	492e      	ldr	r1, [pc, #184]	; (8000724 <decodeMorse+0x314>)
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff fdb1 	bl	80001d4 <strcmp>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d101      	bne.n	800067c <decodeMorse+0x26c>
 8000678:	2337      	movs	r3, #55	; 0x37
 800067a:	e05a      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"---..")) return '8';
 800067c:	492a      	ldr	r1, [pc, #168]	; (8000728 <decodeMorse+0x318>)
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f7ff fda8 	bl	80001d4 <strcmp>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d101      	bne.n	800068e <decodeMorse+0x27e>
 800068a:	2338      	movs	r3, #56	; 0x38
 800068c:	e051      	b.n	8000732 <decodeMorse+0x322>
  else if (!strcmp(code,"----.")) return '9';
 800068e:	4927      	ldr	r1, [pc, #156]	; (800072c <decodeMorse+0x31c>)
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f7ff fd9f 	bl	80001d4 <strcmp>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d149      	bne.n	8000730 <decodeMorse+0x320>
 800069c:	2339      	movs	r3, #57	; 0x39
 800069e:	e048      	b.n	8000732 <decodeMorse+0x322>
 80006a0:	080036a0 	.word	0x080036a0
 80006a4:	080036a4 	.word	0x080036a4
 80006a8:	080036ac 	.word	0x080036ac
 80006ac:	080036b4 	.word	0x080036b4
 80006b0:	080036b8 	.word	0x080036b8
 80006b4:	080036bc 	.word	0x080036bc
 80006b8:	080036c4 	.word	0x080036c4
 80006bc:	080036c8 	.word	0x080036c8
 80006c0:	080036d0 	.word	0x080036d0
 80006c4:	080036d4 	.word	0x080036d4
 80006c8:	080036dc 	.word	0x080036dc
 80006cc:	080036e0 	.word	0x080036e0
 80006d0:	080036e8 	.word	0x080036e8
 80006d4:	080036ec 	.word	0x080036ec
 80006d8:	080036f0 	.word	0x080036f0
 80006dc:	080036f4 	.word	0x080036f4
 80006e0:	080036fc 	.word	0x080036fc
 80006e4:	08003704 	.word	0x08003704
 80006e8:	08003708 	.word	0x08003708
 80006ec:	0800370c 	.word	0x0800370c
 80006f0:	08003710 	.word	0x08003710
 80006f4:	08003714 	.word	0x08003714
 80006f8:	0800371c 	.word	0x0800371c
 80006fc:	08003720 	.word	0x08003720
 8000700:	08003728 	.word	0x08003728
 8000704:	08003730 	.word	0x08003730
 8000708:	08003738 	.word	0x08003738
 800070c:	08003740 	.word	0x08003740
 8000710:	08003748 	.word	0x08003748
 8000714:	08003750 	.word	0x08003750
 8000718:	08003758 	.word	0x08003758
 800071c:	08003760 	.word	0x08003760
 8000720:	08003768 	.word	0x08003768
 8000724:	08003770 	.word	0x08003770
 8000728:	08003778 	.word	0x08003778
 800072c:	08003780 	.word	0x08003780
  else return ' ';  // Space between words
 8000730:	2320      	movs	r3, #32
}
 8000732:	4618      	mov	r0, r3
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop

0800073c <intToCharArray>:

void intToCharArray(int num, char charArray[])
{
 800073c:	b480      	push	{r7}
 800073e:	b087      	sub	sp, #28
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
    // Extract digits
    int d3 = num % 10;
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <intToCharArray+0x94>)
 800074a:	fb83 1302 	smull	r1, r3, r3, r2
 800074e:	1099      	asrs	r1, r3, #2
 8000750:	17d3      	asrs	r3, r2, #31
 8000752:	1ac9      	subs	r1, r1, r3
 8000754:	460b      	mov	r3, r1
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	440b      	add	r3, r1
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	617b      	str	r3, [r7, #20]
    int d2 = (num % 100) / 10;
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <intToCharArray+0x98>)
 8000764:	fb83 1302 	smull	r1, r3, r3, r2
 8000768:	1159      	asrs	r1, r3, #5
 800076a:	17d3      	asrs	r3, r2, #31
 800076c:	1acb      	subs	r3, r1, r3
 800076e:	2164      	movs	r1, #100	; 0x64
 8000770:	fb01 f303 	mul.w	r3, r1, r3
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	4a16      	ldr	r2, [pc, #88]	; (80007d0 <intToCharArray+0x94>)
 8000778:	fb82 1203 	smull	r1, r2, r2, r3
 800077c:	1092      	asrs	r2, r2, #2
 800077e:	17db      	asrs	r3, r3, #31
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	613b      	str	r3, [r7, #16]
    int d1 = num / 100;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <intToCharArray+0x98>)
 8000788:	fb82 1203 	smull	r1, r2, r2, r3
 800078c:	1152      	asrs	r2, r2, #5
 800078e:	17db      	asrs	r3, r3, #31
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	60fb      	str	r3, [r7, #12]

    // Convert digits to characters
    charArray[0] = '0' + d1;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	3330      	adds	r3, #48	; 0x30
 800079a:	b2da      	uxtb	r2, r3
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	701a      	strb	r2, [r3, #0]
    charArray[1] = '0' + d2;
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	3230      	adds	r2, #48	; 0x30
 80007aa:	b2d2      	uxtb	r2, r2
 80007ac:	701a      	strb	r2, [r3, #0]
    charArray[2] = '0' + d3;
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	3302      	adds	r3, #2
 80007b6:	3230      	adds	r2, #48	; 0x30
 80007b8:	b2d2      	uxtb	r2, r2
 80007ba:	701a      	strb	r2, [r3, #0]

    // Null-terminate the array
    charArray[3] = '\0';
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	3303      	adds	r3, #3
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
}
 80007c4:	bf00      	nop
 80007c6:	371c      	adds	r7, #28
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	66666667 	.word	0x66666667
 80007d4:	51eb851f 	.word	0x51eb851f

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007dc:	f000 fabe 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e0:	f000 f8b6 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e4:	f000 f968 	bl	8000ab8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80007e8:	f000 f912 	bl	8000a10 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80007ec:	484d      	ldr	r0, [pc, #308]	; (8000924 <main+0x14c>)
 80007ee:	f002 fabb 	bl	8002d68 <HAL_TIM_Base_Start>

  lcd_init ();
 80007f2:	f7ff fdba 	bl	800036a <lcd_init>
  lcd_put_cur(0, 0);
 80007f6:	2100      	movs	r1, #0
 80007f8:	2000      	movs	r0, #0
 80007fa:	f7ff fd97 	bl	800032c <lcd_put_cur>
  i=0;
 80007fe:	4b4a      	ldr	r3, [pc, #296]	; (8000928 <main+0x150>)
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
  memset(inp,'\0',6*sizeof(inp[0]));
 8000804:	2206      	movs	r2, #6
 8000806:	2100      	movs	r1, #0
 8000808:	4848      	ldr	r0, [pc, #288]	; (800092c <main+0x154>)
 800080a:	f002 ff11 	bl	8003630 <memset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  j=0;
 800080e:	4b48      	ldr	r3, [pc, #288]	; (8000930 <main+0x158>)
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
	buttonState=HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13);
 8000814:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000818:	4846      	ldr	r0, [pc, #280]	; (8000934 <main+0x15c>)
 800081a:	f000 fdc5 	bl	80013a8 <HAL_GPIO_ReadPin>
 800081e:	4603      	mov	r3, r0
 8000820:	461a      	mov	r2, r3
 8000822:	4b45      	ldr	r3, [pc, #276]	; (8000938 <main+0x160>)
 8000824:	601a      	str	r2, [r3, #0]
	while(!buttonState)
 8000826:	e010      	b.n	800084a <main+0x72>
	{
		buttonState=HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13);
 8000828:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082c:	4841      	ldr	r0, [pc, #260]	; (8000934 <main+0x15c>)
 800082e:	f000 fdbb 	bl	80013a8 <HAL_GPIO_ReadPin>
 8000832:	4603      	mov	r3, r0
 8000834:	461a      	mov	r2, r3
 8000836:	4b40      	ldr	r3, [pc, #256]	; (8000938 <main+0x160>)
 8000838:	601a      	str	r2, [r3, #0]
		j++;
 800083a:	4b3d      	ldr	r3, [pc, #244]	; (8000930 <main+0x158>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	3301      	adds	r3, #1
 8000840:	4a3b      	ldr	r2, [pc, #236]	; (8000930 <main+0x158>)
 8000842:	6013      	str	r3, [r2, #0]
		HAL_Delay(1);
 8000844:	2001      	movs	r0, #1
 8000846:	f000 faef 	bl	8000e28 <HAL_Delay>
	while(!buttonState)
 800084a:	4b3b      	ldr	r3, [pc, #236]	; (8000938 <main+0x160>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d0ea      	beq.n	8000828 <main+0x50>
	}
	if (j!=0)
 8000852:	4b37      	ldr	r3, [pc, #220]	; (8000930 <main+0x158>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d0d9      	beq.n	800080e <main+0x36>
	{
		lcd_put_cur(1,13);
 800085a:	210d      	movs	r1, #13
 800085c:	2001      	movs	r0, #1
 800085e:	f7ff fd65 	bl	800032c <lcd_put_cur>
		intToCharArray(j, charArray);
 8000862:	4b33      	ldr	r3, [pc, #204]	; (8000930 <main+0x158>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4935      	ldr	r1, [pc, #212]	; (800093c <main+0x164>)
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ff67 	bl	800073c <intToCharArray>
		lcd_send_string(charArray);
 800086e:	4833      	ldr	r0, [pc, #204]	; (800093c <main+0x164>)
 8000870:	f7ff fdb8 	bl	80003e4 <lcd_send_string>
		if (j<=120)
 8000874:	4b2e      	ldr	r3, [pc, #184]	; (8000930 <main+0x158>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b78      	cmp	r3, #120	; 0x78
 800087a:	dc03      	bgt.n	8000884 <main+0xac>
		{
			state='.';
 800087c:	4b30      	ldr	r3, [pc, #192]	; (8000940 <main+0x168>)
 800087e:	222e      	movs	r2, #46	; 0x2e
 8000880:	701a      	strb	r2, [r3, #0]
 8000882:	e028      	b.n	80008d6 <main+0xfe>
		}
		else if (j<=250)
 8000884:	4b2a      	ldr	r3, [pc, #168]	; (8000930 <main+0x158>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2bfa      	cmp	r3, #250	; 0xfa
 800088a:	dc03      	bgt.n	8000894 <main+0xbc>
		{
			state='-';
 800088c:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <main+0x168>)
 800088e:	222d      	movs	r2, #45	; 0x2d
 8000890:	701a      	strb	r2, [r3, #0]
 8000892:	e020      	b.n	80008d6 <main+0xfe>
		}
		else
		{
			temp=decodeMorse(inp);
 8000894:	4825      	ldr	r0, [pc, #148]	; (800092c <main+0x154>)
 8000896:	f7ff fdbb 	bl	8000410 <decodeMorse>
 800089a:	4603      	mov	r3, r0
 800089c:	461a      	mov	r2, r3
 800089e:	4b29      	ldr	r3, [pc, #164]	; (8000944 <main+0x16c>)
 80008a0:	701a      	strb	r2, [r3, #0]
			lcd_put_cur(0,k);
 80008a2:	4b29      	ldr	r3, [pc, #164]	; (8000948 <main+0x170>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4619      	mov	r1, r3
 80008a8:	2000      	movs	r0, #0
 80008aa:	f7ff fd3f 	bl	800032c <lcd_put_cur>
			lcd_send_string(&temp);
 80008ae:	4825      	ldr	r0, [pc, #148]	; (8000944 <main+0x16c>)
 80008b0:	f7ff fd98 	bl	80003e4 <lcd_send_string>
			k+=1;
 80008b4:	4b24      	ldr	r3, [pc, #144]	; (8000948 <main+0x170>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	3301      	adds	r3, #1
 80008ba:	4a23      	ldr	r2, [pc, #140]	; (8000948 <main+0x170>)
 80008bc:	6013      	str	r3, [r2, #0]
			i=-1;
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <main+0x150>)
 80008c0:	f04f 32ff 	mov.w	r2, #4294967295
 80008c4:	601a      	str	r2, [r3, #0]
			memset(inp,'\0',6*sizeof(inp[0]));
 80008c6:	2206      	movs	r2, #6
 80008c8:	2100      	movs	r1, #0
 80008ca:	4818      	ldr	r0, [pc, #96]	; (800092c <main+0x154>)
 80008cc:	f002 feb0 	bl	8003630 <memset>
			temp='\0';
 80008d0:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <main+0x16c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
		}
		if (i!=-1){
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <main+0x150>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008de:	d00e      	beq.n	80008fe <main+0x126>
		lcd_put_cur(1,i);
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <main+0x150>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	2001      	movs	r0, #1
 80008e8:	f7ff fd20 	bl	800032c <lcd_put_cur>
		lcd_send_string(&state);
 80008ec:	4814      	ldr	r0, [pc, #80]	; (8000940 <main+0x168>)
 80008ee:	f7ff fd79 	bl	80003e4 <lcd_send_string>
		inp[i]=state;
 80008f2:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <main+0x150>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <main+0x168>)
 80008f8:	7811      	ldrb	r1, [r2, #0]
 80008fa:	4a0c      	ldr	r2, [pc, #48]	; (800092c <main+0x154>)
 80008fc:	54d1      	strb	r1, [r2, r3]
		}
		if (i==-1){
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <main+0x150>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000906:	d106      	bne.n	8000916 <main+0x13e>
			lcd_put_cur(1,0);
 8000908:	2100      	movs	r1, #0
 800090a:	2001      	movs	r0, #1
 800090c:	f7ff fd0e 	bl	800032c <lcd_put_cur>
			lcd_send_string("      ");
 8000910:	480e      	ldr	r0, [pc, #56]	; (800094c <main+0x174>)
 8000912:	f7ff fd67 	bl	80003e4 <lcd_send_string>
		}
		i+=1;
 8000916:	4b04      	ldr	r3, [pc, #16]	; (8000928 <main+0x150>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	4a02      	ldr	r2, [pc, #8]	; (8000928 <main+0x150>)
 800091e:	6013      	str	r3, [r2, #0]
	  j=0;
 8000920:	e775      	b.n	800080e <main+0x36>
 8000922:	bf00      	nop
 8000924:	20000028 	.word	0x20000028
 8000928:	2000007c 	.word	0x2000007c
 800092c:	20000084 	.word	0x20000084
 8000930:	2000008c 	.word	0x2000008c
 8000934:	48000800 	.word	0x48000800
 8000938:	20000074 	.word	0x20000074
 800093c:	20000090 	.word	0x20000090
 8000940:	20000078 	.word	0x20000078
 8000944:	2000008a 	.word	0x2000008a
 8000948:	20000080 	.word	0x20000080
 800094c:	08003788 	.word	0x08003788

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b0a6      	sub	sp, #152	; 0x98
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800095a:	2228      	movs	r2, #40	; 0x28
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f002 fe66 	bl	8003630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2258      	movs	r2, #88	; 0x58
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f002 fe58 	bl	8003630 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000980:	2301      	movs	r3, #1
 8000982:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000988:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800098a:	2301      	movs	r3, #1
 800098c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098e:	2302      	movs	r3, #2
 8000990:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000994:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000998:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800099c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 fd2a 	bl	8001408 <HAL_RCC_OscConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80009ba:	f000 f90f 	bl	8000bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009be:	230f      	movs	r3, #15
 80009c0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c2:	2302      	movs	r3, #2
 80009c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009d8:	2102      	movs	r1, #2
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 fd68 	bl	80024b0 <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009e6:	f000 f8f9 	bl	8000bdc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80009ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80009f0:	2300      	movs	r3, #0
 80009f2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 ff40 	bl	800287c <HAL_RCCEx_PeriphCLKConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a02:	f000 f8eb 	bl	8000bdc <Error_Handler>
  }
}
 8000a06:	bf00      	nop
 8000a08:	3798      	adds	r7, #152	; 0x98
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a16:	f107 0310 	add.w	r3, r7, #16
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a2e:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <MX_TIM1_Init+0xa0>)
 8000a30:	4a20      	ldr	r2, [pc, #128]	; (8000ab4 <MX_TIM1_Init+0xa4>)
 8000a32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000a34:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <MX_TIM1_Init+0xa0>)
 8000a36:	2247      	movs	r2, #71	; 0x47
 8000a38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <MX_TIM1_Init+0xa0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_TIM1_Init+0xa0>)
 8000a42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <MX_TIM1_Init+0xa0>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_TIM1_Init+0xa0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_TIM1_Init+0xa0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a5a:	4815      	ldr	r0, [pc, #84]	; (8000ab0 <MX_TIM1_Init+0xa0>)
 8000a5c:	f002 f92c 	bl	8002cb8 <HAL_TIM_Base_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a66:	f000 f8b9 	bl	8000bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a70:	f107 0310 	add.w	r3, r7, #16
 8000a74:	4619      	mov	r1, r3
 8000a76:	480e      	ldr	r0, [pc, #56]	; (8000ab0 <MX_TIM1_Init+0xa0>)
 8000a78:	f002 fafd 	bl	8003076 <HAL_TIM_ConfigClockSource>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000a82:	f000 f8ab 	bl	8000bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	4619      	mov	r1, r3
 8000a96:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <MX_TIM1_Init+0xa0>)
 8000a98:	f002 fd20 	bl	80034dc <HAL_TIMEx_MasterConfigSynchronization>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000aa2:	f000 f89b 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	3720      	adds	r7, #32
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000028 	.word	0x20000028
 8000ab4:	40012c00 	.word	0x40012c00

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ace:	4b40      	ldr	r3, [pc, #256]	; (8000bd0 <MX_GPIO_Init+0x118>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	4a3f      	ldr	r2, [pc, #252]	; (8000bd0 <MX_GPIO_Init+0x118>)
 8000ad4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ad8:	6153      	str	r3, [r2, #20]
 8000ada:	4b3d      	ldr	r3, [pc, #244]	; (8000bd0 <MX_GPIO_Init+0x118>)
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ae6:	4b3a      	ldr	r3, [pc, #232]	; (8000bd0 <MX_GPIO_Init+0x118>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	4a39      	ldr	r2, [pc, #228]	; (8000bd0 <MX_GPIO_Init+0x118>)
 8000aec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000af0:	6153      	str	r3, [r2, #20]
 8000af2:	4b37      	ldr	r3, [pc, #220]	; (8000bd0 <MX_GPIO_Init+0x118>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b34      	ldr	r3, [pc, #208]	; (8000bd0 <MX_GPIO_Init+0x118>)
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	4a33      	ldr	r2, [pc, #204]	; (8000bd0 <MX_GPIO_Init+0x118>)
 8000b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b08:	6153      	str	r3, [r2, #20]
 8000b0a:	4b31      	ldr	r3, [pc, #196]	; (8000bd0 <MX_GPIO_Init+0x118>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <MX_GPIO_Init+0x118>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	4a2d      	ldr	r2, [pc, #180]	; (8000bd0 <MX_GPIO_Init+0x118>)
 8000b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b20:	6153      	str	r3, [r2, #20]
 8000b22:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <MX_GPIO_Init+0x118>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2101      	movs	r1, #1
 8000b32:	4828      	ldr	r0, [pc, #160]	; (8000bd4 <MX_GPIO_Init+0x11c>)
 8000b34:	f000 fc50 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f240 710c 	movw	r1, #1804	; 0x70c
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b42:	f000 fc49 	bl	80013d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000b4c:	4822      	ldr	r0, [pc, #136]	; (8000bd8 <MX_GPIO_Init+0x120>)
 8000b4e:	f000 fc43 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	481b      	ldr	r0, [pc, #108]	; (8000bd4 <MX_GPIO_Init+0x11c>)
 8000b68:	f000 fa94 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	4814      	ldr	r0, [pc, #80]	; (8000bd4 <MX_GPIO_Init+0x11c>)
 8000b84:	f000 fa86 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8000b88:	f240 730c 	movw	r3, #1804	; 0x70c
 8000b8c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba4:	f000 fa76 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ba8:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_GPIO_Init+0x120>)
 8000bc2:	f000 fa67 	bl	8001094 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc6:	bf00      	nop
 8000bc8:	3728      	adds	r7, #40	; 0x28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	48000800 	.word	0x48000800
 8000bd8:	48000400 	.word	0x48000400

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <Error_Handler+0x8>
	...

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <HAL_MspInit+0x44>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <HAL_MspInit+0x44>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6193      	str	r3, [r2, #24]
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <HAL_MspInit+0x44>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <HAL_MspInit+0x44>)
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	4a08      	ldr	r2, [pc, #32]	; (8000c2c <HAL_MspInit+0x44>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c10:	61d3      	str	r3, [r2, #28]
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_MspInit+0x44>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000

08000c30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <HAL_TIM_Base_MspInit+0x44>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d113      	bne.n	8000c6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <HAL_TIM_Base_MspInit+0x48>)
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	4a0c      	ldr	r2, [pc, #48]	; (8000c78 <HAL_TIM_Base_MspInit+0x48>)
 8000c48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c4c:	6193      	str	r3, [r2, #24]
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_TIM_Base_MspInit+0x48>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	201b      	movs	r0, #27
 8000c60:	f000 f9e1 	bl	8001026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000c64:	201b      	movs	r0, #27
 8000c66:	f000 f9fa 	bl	800105e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40012c00 	.word	0x40012c00
 8000c78:	40021000 	.word	0x40021000

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c80:	e7fe      	b.n	8000c80 <NMI_Handler+0x4>

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <MemManage_Handler+0x4>

08000c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc8:	f000 f88e 	bl	8000de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <TIM1_CC_IRQHandler+0x10>)
 8000cd6:	f002 f8af 	bl	8002e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000028 	.word	0x20000028

08000ce4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <SystemInit+0x20>)
 8000cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <SystemInit+0x20>)
 8000cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d40 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d0c:	f7ff ffea 	bl	8000ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d12:	490d      	ldr	r1, [pc, #52]	; (8000d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <LoopForever+0xe>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d28:	4c0a      	ldr	r4, [pc, #40]	; (8000d54 <LoopForever+0x16>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d36:	f002 fc83 	bl	8003640 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d3a:	f7ff fd4d 	bl	80007d8 <main>

08000d3e <LoopForever>:

LoopForever:
    b LoopForever
 8000d3e:	e7fe      	b.n	8000d3e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d40:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d4c:	080037c8 	.word	0x080037c8
  ldr r2, =_sbss
 8000d50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d54:	20000098 	.word	0x20000098

08000d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC1_2_IRQHandler>
	...

08000d5c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <HAL_Init+0x28>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <HAL_Init+0x28>)
 8000d66:	f043 0310 	orr.w	r3, r3, #16
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f000 f94f 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d72:	200f      	movs	r0, #15
 8000d74:	f000 f808 	bl	8000d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d78:	f7ff ff36 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40022000 	.word	0x40022000

08000d88 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_InitTick+0x54>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_InitTick+0x58>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 f967 	bl	800107a <HAL_SYSTICK_Config>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00e      	b.n	8000dd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b0f      	cmp	r3, #15
 8000dba:	d80a      	bhi.n	8000dd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc4:	f000 f92f 	bl	8001026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc8:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <HAL_InitTick+0x5c>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e000      	b.n	8000dd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000004 	.word	0x20000004

08000de8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_IncTick+0x20>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_IncTick+0x24>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <HAL_IncTick+0x24>)
 8000dfa:	6013      	str	r3, [r2, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000094 	.word	0x20000094

08000e10 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <HAL_GetTick+0x14>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000094 	.word	0x20000094

08000e28 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e30:	f7ff ffee 	bl	8000e10 <HAL_GetTick>
 8000e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e40:	d005      	beq.n	8000e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_Delay+0x44>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e4e:	bf00      	nop
 8000e50:	f7ff ffde 	bl	8000e10 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d8f7      	bhi.n	8000e50 <HAL_Delay+0x28>
  {
  }
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008

08000e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	f003 0307 	and.w	r3, r3, #7
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	db0b      	blt.n	8000efe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	f003 021f 	and.w	r2, r3, #31
 8000eec:	4907      	ldr	r1, [pc, #28]	; (8000f0c <__NVIC_EnableIRQ+0x38>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	095b      	lsrs	r3, r3, #5
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8000efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000e100 	.word	0xe000e100

08000f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	db0a      	blt.n	8000f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	490c      	ldr	r1, [pc, #48]	; (8000f5c <__NVIC_SetPriority+0x4c>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	0112      	lsls	r2, r2, #4
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	440b      	add	r3, r1
 8000f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f38:	e00a      	b.n	8000f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4908      	ldr	r1, [pc, #32]	; (8000f60 <__NVIC_SetPriority+0x50>)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	3b04      	subs	r3, #4
 8000f48:	0112      	lsls	r2, r2, #4
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	761a      	strb	r2, [r3, #24]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000e100 	.word	0xe000e100
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f1c3 0307 	rsb	r3, r3, #7
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	bf28      	it	cs
 8000f82:	2304      	movcs	r3, #4
 8000f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	d902      	bls.n	8000f94 <NVIC_EncodePriority+0x30>
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3b03      	subs	r3, #3
 8000f92:	e000      	b.n	8000f96 <NVIC_EncodePriority+0x32>
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fac:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43d9      	mvns	r1, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	4313      	orrs	r3, r2
         );
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3724      	adds	r7, #36	; 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fdc:	d301      	bcc.n	8000fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00f      	b.n	8001002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <SysTick_Config+0x40>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fea:	210f      	movs	r1, #15
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff0:	f7ff ff8e 	bl	8000f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <SysTick_Config+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <SysTick_Config+0x40>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff29 	bl	8000e70 <__NVIC_SetPriorityGrouping>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001038:	f7ff ff3e 	bl	8000eb8 <__NVIC_GetPriorityGrouping>
 800103c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f7ff ff8e 	bl	8000f64 <NVIC_EncodePriority>
 8001048:	4602      	mov	r2, r0
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5d 	bl	8000f10 <__NVIC_SetPriority>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff31 	bl	8000ed4 <__NVIC_EnableIRQ>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffa2 	bl	8000fcc <SysTick_Config>
 8001088:	4603      	mov	r3, r0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	b480      	push	{r7}
 8001096:	b087      	sub	sp, #28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a2:	e160      	b.n	8001366 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	2101      	movs	r1, #1
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	fa01 f303 	lsl.w	r3, r1, r3
 80010b0:	4013      	ands	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 8152 	beq.w	8001360 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d005      	beq.n	80010d4 <HAL_GPIO_Init+0x40>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d130      	bne.n	8001136 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	68da      	ldr	r2, [r3, #12]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800110a:	2201      	movs	r2, #1
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	091b      	lsrs	r3, r3, #4
 8001120:	f003 0201 	and.w	r2, r3, #1
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	2b03      	cmp	r3, #3
 8001140:	d017      	beq.n	8001172 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	2203      	movs	r2, #3
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d123      	bne.n	80011c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	691a      	ldr	r2, [r3, #16]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	08da      	lsrs	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3208      	adds	r2, #8
 80011c0:	6939      	ldr	r1, [r7, #16]
 80011c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	2203      	movs	r2, #3
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 0203 	and.w	r2, r3, #3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 80ac 	beq.w	8001360 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001208:	4b5e      	ldr	r3, [pc, #376]	; (8001384 <HAL_GPIO_Init+0x2f0>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a5d      	ldr	r2, [pc, #372]	; (8001384 <HAL_GPIO_Init+0x2f0>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b5b      	ldr	r3, [pc, #364]	; (8001384 <HAL_GPIO_Init+0x2f0>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001220:	4a59      	ldr	r2, [pc, #356]	; (8001388 <HAL_GPIO_Init+0x2f4>)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	3302      	adds	r3, #2
 8001228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800124a:	d025      	beq.n	8001298 <HAL_GPIO_Init+0x204>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a4f      	ldr	r2, [pc, #316]	; (800138c <HAL_GPIO_Init+0x2f8>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d01f      	beq.n	8001294 <HAL_GPIO_Init+0x200>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a4e      	ldr	r2, [pc, #312]	; (8001390 <HAL_GPIO_Init+0x2fc>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d019      	beq.n	8001290 <HAL_GPIO_Init+0x1fc>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a4d      	ldr	r2, [pc, #308]	; (8001394 <HAL_GPIO_Init+0x300>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d013      	beq.n	800128c <HAL_GPIO_Init+0x1f8>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a4c      	ldr	r2, [pc, #304]	; (8001398 <HAL_GPIO_Init+0x304>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d00d      	beq.n	8001288 <HAL_GPIO_Init+0x1f4>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a4b      	ldr	r2, [pc, #300]	; (800139c <HAL_GPIO_Init+0x308>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d007      	beq.n	8001284 <HAL_GPIO_Init+0x1f0>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a4a      	ldr	r2, [pc, #296]	; (80013a0 <HAL_GPIO_Init+0x30c>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d101      	bne.n	8001280 <HAL_GPIO_Init+0x1ec>
 800127c:	2306      	movs	r3, #6
 800127e:	e00c      	b.n	800129a <HAL_GPIO_Init+0x206>
 8001280:	2307      	movs	r3, #7
 8001282:	e00a      	b.n	800129a <HAL_GPIO_Init+0x206>
 8001284:	2305      	movs	r3, #5
 8001286:	e008      	b.n	800129a <HAL_GPIO_Init+0x206>
 8001288:	2304      	movs	r3, #4
 800128a:	e006      	b.n	800129a <HAL_GPIO_Init+0x206>
 800128c:	2303      	movs	r3, #3
 800128e:	e004      	b.n	800129a <HAL_GPIO_Init+0x206>
 8001290:	2302      	movs	r3, #2
 8001292:	e002      	b.n	800129a <HAL_GPIO_Init+0x206>
 8001294:	2301      	movs	r3, #1
 8001296:	e000      	b.n	800129a <HAL_GPIO_Init+0x206>
 8001298:	2300      	movs	r3, #0
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	f002 0203 	and.w	r2, r2, #3
 80012a0:	0092      	lsls	r2, r2, #2
 80012a2:	4093      	lsls	r3, r2
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012aa:	4937      	ldr	r1, [pc, #220]	; (8001388 <HAL_GPIO_Init+0x2f4>)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	3302      	adds	r3, #2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b8:	4b3a      	ldr	r3, [pc, #232]	; (80013a4 <HAL_GPIO_Init+0x310>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012dc:	4a31      	ldr	r2, [pc, #196]	; (80013a4 <HAL_GPIO_Init+0x310>)
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012e2:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <HAL_GPIO_Init+0x310>)
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4313      	orrs	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001306:	4a27      	ldr	r2, [pc, #156]	; (80013a4 <HAL_GPIO_Init+0x310>)
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800130c:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <HAL_GPIO_Init+0x310>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	43db      	mvns	r3, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001330:	4a1c      	ldr	r2, [pc, #112]	; (80013a4 <HAL_GPIO_Init+0x310>)
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001336:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <HAL_GPIO_Init+0x310>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4313      	orrs	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <HAL_GPIO_Init+0x310>)
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	3301      	adds	r3, #1
 8001364:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	fa22 f303 	lsr.w	r3, r2, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	f47f ae97 	bne.w	80010a4 <HAL_GPIO_Init+0x10>
  }
}
 8001376:	bf00      	nop
 8001378:	bf00      	nop
 800137a:	371c      	adds	r7, #28
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	40021000 	.word	0x40021000
 8001388:	40010000 	.word	0x40010000
 800138c:	48000400 	.word	0x48000400
 8001390:	48000800 	.word	0x48000800
 8001394:	48000c00 	.word	0x48000c00
 8001398:	48001000 	.word	0x48001000
 800139c:	48001400 	.word	0x48001400
 80013a0:	48001800 	.word	0x48001800
 80013a4:	40010400 	.word	0x40010400

080013a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691a      	ldr	r2, [r3, #16]
 80013b8:	887b      	ldrh	r3, [r7, #2]
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d002      	beq.n	80013c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013c0:	2301      	movs	r3, #1
 80013c2:	73fb      	strb	r3, [r7, #15]
 80013c4:	e001      	b.n	80013ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
 80013e4:	4613      	mov	r3, r2
 80013e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e8:	787b      	ldrb	r3, [r7, #1]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800140e:	af00      	add	r7, sp, #0
 8001410:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001414:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001418:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800141a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800141e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d102      	bne.n	800142e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	f001 b83a 	b.w	80024a2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001432:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 816f 	beq.w	8001722 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001444:	4bb5      	ldr	r3, [pc, #724]	; (800171c <HAL_RCC_OscConfig+0x314>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 030c 	and.w	r3, r3, #12
 800144c:	2b04      	cmp	r3, #4
 800144e:	d00c      	beq.n	800146a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001450:	4bb2      	ldr	r3, [pc, #712]	; (800171c <HAL_RCC_OscConfig+0x314>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 030c 	and.w	r3, r3, #12
 8001458:	2b08      	cmp	r3, #8
 800145a:	d15c      	bne.n	8001516 <HAL_RCC_OscConfig+0x10e>
 800145c:	4baf      	ldr	r3, [pc, #700]	; (800171c <HAL_RCC_OscConfig+0x314>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001468:	d155      	bne.n	8001516 <HAL_RCC_OscConfig+0x10e>
 800146a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800146e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001472:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001476:	fa93 f3a3 	rbit	r3, r3
 800147a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800147e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001482:	fab3 f383 	clz	r3, r3
 8001486:	b2db      	uxtb	r3, r3
 8001488:	095b      	lsrs	r3, r3, #5
 800148a:	b2db      	uxtb	r3, r3
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b01      	cmp	r3, #1
 8001494:	d102      	bne.n	800149c <HAL_RCC_OscConfig+0x94>
 8001496:	4ba1      	ldr	r3, [pc, #644]	; (800171c <HAL_RCC_OscConfig+0x314>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	e015      	b.n	80014c8 <HAL_RCC_OscConfig+0xc0>
 800149c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014a0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80014a8:	fa93 f3a3 	rbit	r3, r3
 80014ac:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80014b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014b4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80014b8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80014bc:	fa93 f3a3 	rbit	r3, r3
 80014c0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80014c4:	4b95      	ldr	r3, [pc, #596]	; (800171c <HAL_RCC_OscConfig+0x314>)
 80014c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014cc:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80014d0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80014d4:	fa92 f2a2 	rbit	r2, r2
 80014d8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80014dc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80014e0:	fab2 f282 	clz	r2, r2
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	f042 0220 	orr.w	r2, r2, #32
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	f002 021f 	and.w	r2, r2, #31
 80014f0:	2101      	movs	r1, #1
 80014f2:	fa01 f202 	lsl.w	r2, r1, r2
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 8111 	beq.w	8001720 <HAL_RCC_OscConfig+0x318>
 80014fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001502:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	f040 8108 	bne.w	8001720 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	f000 bfc6 	b.w	80024a2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001516:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800151a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x12e>
 8001528:	4b7c      	ldr	r3, [pc, #496]	; (800171c <HAL_RCC_OscConfig+0x314>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a7b      	ldr	r2, [pc, #492]	; (800171c <HAL_RCC_OscConfig+0x314>)
 800152e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	e036      	b.n	80015a4 <HAL_RCC_OscConfig+0x19c>
 8001536:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800153a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x158>
 8001546:	4b75      	ldr	r3, [pc, #468]	; (800171c <HAL_RCC_OscConfig+0x314>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a74      	ldr	r2, [pc, #464]	; (800171c <HAL_RCC_OscConfig+0x314>)
 800154c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b72      	ldr	r3, [pc, #456]	; (800171c <HAL_RCC_OscConfig+0x314>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a71      	ldr	r2, [pc, #452]	; (800171c <HAL_RCC_OscConfig+0x314>)
 8001558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e021      	b.n	80015a4 <HAL_RCC_OscConfig+0x19c>
 8001560:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001564:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001570:	d10c      	bne.n	800158c <HAL_RCC_OscConfig+0x184>
 8001572:	4b6a      	ldr	r3, [pc, #424]	; (800171c <HAL_RCC_OscConfig+0x314>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a69      	ldr	r2, [pc, #420]	; (800171c <HAL_RCC_OscConfig+0x314>)
 8001578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	4b67      	ldr	r3, [pc, #412]	; (800171c <HAL_RCC_OscConfig+0x314>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a66      	ldr	r2, [pc, #408]	; (800171c <HAL_RCC_OscConfig+0x314>)
 8001584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e00b      	b.n	80015a4 <HAL_RCC_OscConfig+0x19c>
 800158c:	4b63      	ldr	r3, [pc, #396]	; (800171c <HAL_RCC_OscConfig+0x314>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a62      	ldr	r2, [pc, #392]	; (800171c <HAL_RCC_OscConfig+0x314>)
 8001592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	4b60      	ldr	r3, [pc, #384]	; (800171c <HAL_RCC_OscConfig+0x314>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a5f      	ldr	r2, [pc, #380]	; (800171c <HAL_RCC_OscConfig+0x314>)
 800159e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d059      	beq.n	8001668 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fc2c 	bl	8000e10 <HAL_GetTick>
 80015b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015bc:	e00a      	b.n	80015d4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015be:	f7ff fc27 	bl	8000e10 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	; 0x64
 80015cc:	d902      	bls.n	80015d4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	f000 bf67 	b.w	80024a2 <HAL_RCC_OscConfig+0x109a>
 80015d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015d8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015dc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80015e0:	fa93 f3a3 	rbit	r3, r3
 80015e4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80015e8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ec:	fab3 f383 	clz	r3, r3
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	095b      	lsrs	r3, r3, #5
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d102      	bne.n	8001606 <HAL_RCC_OscConfig+0x1fe>
 8001600:	4b46      	ldr	r3, [pc, #280]	; (800171c <HAL_RCC_OscConfig+0x314>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	e015      	b.n	8001632 <HAL_RCC_OscConfig+0x22a>
 8001606:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800160a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001612:	fa93 f3a3 	rbit	r3, r3
 8001616:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800161a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800161e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001622:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001626:	fa93 f3a3 	rbit	r3, r3
 800162a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800162e:	4b3b      	ldr	r3, [pc, #236]	; (800171c <HAL_RCC_OscConfig+0x314>)
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001636:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800163a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800163e:	fa92 f2a2 	rbit	r2, r2
 8001642:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001646:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800164a:	fab2 f282 	clz	r2, r2
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	f042 0220 	orr.w	r2, r2, #32
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	f002 021f 	and.w	r2, r2, #31
 800165a:	2101      	movs	r1, #1
 800165c:	fa01 f202 	lsl.w	r2, r1, r2
 8001660:	4013      	ands	r3, r2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0ab      	beq.n	80015be <HAL_RCC_OscConfig+0x1b6>
 8001666:	e05c      	b.n	8001722 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7ff fbd2 	bl	8000e10 <HAL_GetTick>
 800166c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001670:	e00a      	b.n	8001688 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001672:	f7ff fbcd 	bl	8000e10 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	; 0x64
 8001680:	d902      	bls.n	8001688 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	f000 bf0d 	b.w	80024a2 <HAL_RCC_OscConfig+0x109a>
 8001688:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800168c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001694:	fa93 f3a3 	rbit	r3, r3
 8001698:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800169c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a0:	fab3 f383 	clz	r3, r3
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d102      	bne.n	80016ba <HAL_RCC_OscConfig+0x2b2>
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <HAL_RCC_OscConfig+0x314>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	e015      	b.n	80016e6 <HAL_RCC_OscConfig+0x2de>
 80016ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016be:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80016c6:	fa93 f3a3 	rbit	r3, r3
 80016ca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80016ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80016d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80016da:	fa93 f3a3 	rbit	r3, r3
 80016de:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <HAL_RCC_OscConfig+0x314>)
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016ea:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80016ee:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80016f2:	fa92 f2a2 	rbit	r2, r2
 80016f6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80016fa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80016fe:	fab2 f282 	clz	r2, r2
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	f042 0220 	orr.w	r2, r2, #32
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	f002 021f 	and.w	r2, r2, #31
 800170e:	2101      	movs	r1, #1
 8001710:	fa01 f202 	lsl.w	r2, r1, r2
 8001714:	4013      	ands	r3, r2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1ab      	bne.n	8001672 <HAL_RCC_OscConfig+0x26a>
 800171a:	e002      	b.n	8001722 <HAL_RCC_OscConfig+0x31a>
 800171c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001722:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001726:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 817f 	beq.w	8001a36 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001738:	4ba7      	ldr	r3, [pc, #668]	; (80019d8 <HAL_RCC_OscConfig+0x5d0>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 030c 	and.w	r3, r3, #12
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00c      	beq.n	800175e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001744:	4ba4      	ldr	r3, [pc, #656]	; (80019d8 <HAL_RCC_OscConfig+0x5d0>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	2b08      	cmp	r3, #8
 800174e:	d173      	bne.n	8001838 <HAL_RCC_OscConfig+0x430>
 8001750:	4ba1      	ldr	r3, [pc, #644]	; (80019d8 <HAL_RCC_OscConfig+0x5d0>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800175c:	d16c      	bne.n	8001838 <HAL_RCC_OscConfig+0x430>
 800175e:	2302      	movs	r3, #2
 8001760:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001764:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001768:	fa93 f3a3 	rbit	r3, r3
 800176c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001770:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001774:	fab3 f383 	clz	r3, r3
 8001778:	b2db      	uxtb	r3, r3
 800177a:	095b      	lsrs	r3, r3, #5
 800177c:	b2db      	uxtb	r3, r3
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b01      	cmp	r3, #1
 8001786:	d102      	bne.n	800178e <HAL_RCC_OscConfig+0x386>
 8001788:	4b93      	ldr	r3, [pc, #588]	; (80019d8 <HAL_RCC_OscConfig+0x5d0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	e013      	b.n	80017b6 <HAL_RCC_OscConfig+0x3ae>
 800178e:	2302      	movs	r3, #2
 8001790:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001794:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001798:	fa93 f3a3 	rbit	r3, r3
 800179c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80017a0:	2302      	movs	r3, #2
 80017a2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80017a6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80017aa:	fa93 f3a3 	rbit	r3, r3
 80017ae:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80017b2:	4b89      	ldr	r3, [pc, #548]	; (80019d8 <HAL_RCC_OscConfig+0x5d0>)
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	2202      	movs	r2, #2
 80017b8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80017bc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80017c0:	fa92 f2a2 	rbit	r2, r2
 80017c4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80017c8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80017cc:	fab2 f282 	clz	r2, r2
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	f042 0220 	orr.w	r2, r2, #32
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	f002 021f 	and.w	r2, r2, #31
 80017dc:	2101      	movs	r1, #1
 80017de:	fa01 f202 	lsl.w	r2, r1, r2
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00a      	beq.n	80017fe <HAL_RCC_OscConfig+0x3f6>
 80017e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d002      	beq.n	80017fe <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	f000 be52 	b.w	80024a2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fe:	4b76      	ldr	r3, [pc, #472]	; (80019d8 <HAL_RCC_OscConfig+0x5d0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001806:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800180a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	21f8      	movs	r1, #248	; 0xf8
 8001814:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001818:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800181c:	fa91 f1a1 	rbit	r1, r1
 8001820:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001824:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001828:	fab1 f181 	clz	r1, r1
 800182c:	b2c9      	uxtb	r1, r1
 800182e:	408b      	lsls	r3, r1
 8001830:	4969      	ldr	r1, [pc, #420]	; (80019d8 <HAL_RCC_OscConfig+0x5d0>)
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001836:	e0fe      	b.n	8001a36 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001838:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800183c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 8088 	beq.w	800195a <HAL_RCC_OscConfig+0x552>
 800184a:	2301      	movs	r3, #1
 800184c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001854:	fa93 f3a3 	rbit	r3, r3
 8001858:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800185c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001860:	fab3 f383 	clz	r3, r3
 8001864:	b2db      	uxtb	r3, r3
 8001866:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800186a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	461a      	mov	r2, r3
 8001872:	2301      	movs	r3, #1
 8001874:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001876:	f7ff facb 	bl	8000e10 <HAL_GetTick>
 800187a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187e:	e00a      	b.n	8001896 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001880:	f7ff fac6 	bl	8000e10 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d902      	bls.n	8001896 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	f000 be06 	b.w	80024a2 <HAL_RCC_OscConfig+0x109a>
 8001896:	2302      	movs	r3, #2
 8001898:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80018a0:	fa93 f3a3 	rbit	r3, r3
 80018a4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80018a8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ac:	fab3 f383 	clz	r3, r3
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	095b      	lsrs	r3, r3, #5
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d102      	bne.n	80018c6 <HAL_RCC_OscConfig+0x4be>
 80018c0:	4b45      	ldr	r3, [pc, #276]	; (80019d8 <HAL_RCC_OscConfig+0x5d0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	e013      	b.n	80018ee <HAL_RCC_OscConfig+0x4e6>
 80018c6:	2302      	movs	r3, #2
 80018c8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018cc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80018d0:	fa93 f3a3 	rbit	r3, r3
 80018d4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80018d8:	2302      	movs	r3, #2
 80018da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80018de:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80018e2:	fa93 f3a3 	rbit	r3, r3
 80018e6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80018ea:	4b3b      	ldr	r3, [pc, #236]	; (80019d8 <HAL_RCC_OscConfig+0x5d0>)
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	2202      	movs	r2, #2
 80018f0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80018f4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80018f8:	fa92 f2a2 	rbit	r2, r2
 80018fc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001900:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001904:	fab2 f282 	clz	r2, r2
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	f042 0220 	orr.w	r2, r2, #32
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	f002 021f 	and.w	r2, r2, #31
 8001914:	2101      	movs	r1, #1
 8001916:	fa01 f202 	lsl.w	r2, r1, r2
 800191a:	4013      	ands	r3, r2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0af      	beq.n	8001880 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001920:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <HAL_RCC_OscConfig+0x5d0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001928:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800192c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	21f8      	movs	r1, #248	; 0xf8
 8001936:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800193e:	fa91 f1a1 	rbit	r1, r1
 8001942:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001946:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800194a:	fab1 f181 	clz	r1, r1
 800194e:	b2c9      	uxtb	r1, r1
 8001950:	408b      	lsls	r3, r1
 8001952:	4921      	ldr	r1, [pc, #132]	; (80019d8 <HAL_RCC_OscConfig+0x5d0>)
 8001954:	4313      	orrs	r3, r2
 8001956:	600b      	str	r3, [r1, #0]
 8001958:	e06d      	b.n	8001a36 <HAL_RCC_OscConfig+0x62e>
 800195a:	2301      	movs	r3, #1
 800195c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800196c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001970:	fab3 f383 	clz	r3, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800197a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	461a      	mov	r2, r3
 8001982:	2300      	movs	r3, #0
 8001984:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001986:	f7ff fa43 	bl	8000e10 <HAL_GetTick>
 800198a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198e:	e00a      	b.n	80019a6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001990:	f7ff fa3e 	bl	8000e10 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d902      	bls.n	80019a6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	f000 bd7e 	b.w	80024a2 <HAL_RCC_OscConfig+0x109a>
 80019a6:	2302      	movs	r3, #2
 80019a8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019b0:	fa93 f3a3 	rbit	r3, r3
 80019b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80019b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019bc:	fab3 f383 	clz	r3, r3
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d105      	bne.n	80019dc <HAL_RCC_OscConfig+0x5d4>
 80019d0:	4b01      	ldr	r3, [pc, #4]	; (80019d8 <HAL_RCC_OscConfig+0x5d0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	e016      	b.n	8001a04 <HAL_RCC_OscConfig+0x5fc>
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000
 80019dc:	2302      	movs	r3, #2
 80019de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80019e6:	fa93 f3a3 	rbit	r3, r3
 80019ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80019ee:	2302      	movs	r3, #2
 80019f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80019f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80019f8:	fa93 f3a3 	rbit	r3, r3
 80019fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a00:	4bbf      	ldr	r3, [pc, #764]	; (8001d00 <HAL_RCC_OscConfig+0x8f8>)
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	2202      	movs	r2, #2
 8001a06:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001a0a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001a0e:	fa92 f2a2 	rbit	r2, r2
 8001a12:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001a16:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a1a:	fab2 f282 	clz	r2, r2
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	f042 0220 	orr.w	r2, r2, #32
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	f002 021f 	and.w	r2, r2, #31
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a30:	4013      	ands	r3, r2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1ac      	bne.n	8001990 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 8113 	beq.w	8001c72 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d07c      	beq.n	8001b56 <HAL_RCC_OscConfig+0x74e>
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a66:	fa93 f3a3 	rbit	r3, r3
 8001a6a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001a6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4ba2      	ldr	r3, [pc, #648]	; (8001d04 <HAL_RCC_OscConfig+0x8fc>)
 8001a7c:	4413      	add	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	461a      	mov	r2, r3
 8001a82:	2301      	movs	r3, #1
 8001a84:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a86:	f7ff f9c3 	bl	8000e10 <HAL_GetTick>
 8001a8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8e:	e00a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a90:	f7ff f9be 	bl	8000e10 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d902      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	f000 bcfe 	b.w	80024a2 <HAL_RCC_OscConfig+0x109a>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ab0:	fa93 f2a3 	rbit	r2, r3
 8001ab4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ace:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	fa93 f2a3 	rbit	r2, r3
 8001ad8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001aea:	2202      	movs	r2, #2
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	fa93 f2a3 	rbit	r2, r3
 8001afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b00:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b06:	4b7e      	ldr	r3, [pc, #504]	; (8001d00 <HAL_RCC_OscConfig+0x8f8>)
 8001b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b0e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b12:	2102      	movs	r1, #2
 8001b14:	6019      	str	r1, [r3, #0]
 8001b16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	fa93 f1a3 	rbit	r1, r3
 8001b24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b28:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b2c:	6019      	str	r1, [r3, #0]
  return result;
 8001b2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b32:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	f003 031f 	and.w	r3, r3, #31
 8001b48:	2101      	movs	r1, #1
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d09d      	beq.n	8001a90 <HAL_RCC_OscConfig+0x688>
 8001b54:	e08d      	b.n	8001c72 <HAL_RCC_OscConfig+0x86a>
 8001b56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b5e:	2201      	movs	r2, #1
 8001b60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b66:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	fa93 f2a3 	rbit	r2, r3
 8001b70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b74:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b78:	601a      	str	r2, [r3, #0]
  return result;
 8001b7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b7e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b82:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b84:	fab3 f383 	clz	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4b5d      	ldr	r3, [pc, #372]	; (8001d04 <HAL_RCC_OscConfig+0x8fc>)
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	461a      	mov	r2, r3
 8001b94:	2300      	movs	r3, #0
 8001b96:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b98:	f7ff f93a 	bl	8000e10 <HAL_GetTick>
 8001b9c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba0:	e00a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba2:	f7ff f935 	bl	8000e10 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d902      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	f000 bc75 	b.w	80024a2 <HAL_RCC_OscConfig+0x109a>
 8001bb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bbc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	fa93 f2a3 	rbit	r2, r3
 8001bd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001be4:	2202      	movs	r2, #2
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	fa93 f2a3 	rbit	r2, r3
 8001bf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c04:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c08:	2202      	movs	r2, #2
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c10:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	fa93 f2a3 	rbit	r2, r3
 8001c1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c1e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c22:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c24:	4b36      	ldr	r3, [pc, #216]	; (8001d00 <HAL_RCC_OscConfig+0x8f8>)
 8001c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c2c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c30:	2102      	movs	r1, #2
 8001c32:	6019      	str	r1, [r3, #0]
 8001c34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c38:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	fa93 f1a3 	rbit	r1, r3
 8001c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c46:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001c4a:	6019      	str	r1, [r3, #0]
  return result;
 8001c4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c50:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	fab3 f383 	clz	r3, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	2101      	movs	r1, #1
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d197      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c76:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 81a5 	beq.w	8001fd2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <HAL_RCC_OscConfig+0x8f8>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d116      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <HAL_RCC_OscConfig+0x8f8>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	4a18      	ldr	r2, [pc, #96]	; (8001d00 <HAL_RCC_OscConfig+0x8f8>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	61d3      	str	r3, [r2, #28]
 8001ca6:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <HAL_RCC_OscConfig+0x8f8>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cc0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <HAL_RCC_OscConfig+0x900>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d121      	bne.n	8001d18 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <HAL_RCC_OscConfig+0x900>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0b      	ldr	r2, [pc, #44]	; (8001d08 <HAL_RCC_OscConfig+0x900>)
 8001cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cde:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce0:	f7ff f896 	bl	8000e10 <HAL_GetTick>
 8001ce4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce8:	e010      	b.n	8001d0c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cea:	f7ff f891 	bl	8000e10 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	; 0x64
 8001cf8:	d908      	bls.n	8001d0c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e3d1      	b.n	80024a2 <HAL_RCC_OscConfig+0x109a>
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
 8001d04:	10908120 	.word	0x10908120
 8001d08:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0c:	4b8d      	ldr	r3, [pc, #564]	; (8001f44 <HAL_RCC_OscConfig+0xb3c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0e8      	beq.n	8001cea <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d106      	bne.n	8001d36 <HAL_RCC_OscConfig+0x92e>
 8001d28:	4b87      	ldr	r3, [pc, #540]	; (8001f48 <HAL_RCC_OscConfig+0xb40>)
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	4a86      	ldr	r2, [pc, #536]	; (8001f48 <HAL_RCC_OscConfig+0xb40>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6213      	str	r3, [r2, #32]
 8001d34:	e035      	b.n	8001da2 <HAL_RCC_OscConfig+0x99a>
 8001d36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x958>
 8001d46:	4b80      	ldr	r3, [pc, #512]	; (8001f48 <HAL_RCC_OscConfig+0xb40>)
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	4a7f      	ldr	r2, [pc, #508]	; (8001f48 <HAL_RCC_OscConfig+0xb40>)
 8001d4c:	f023 0301 	bic.w	r3, r3, #1
 8001d50:	6213      	str	r3, [r2, #32]
 8001d52:	4b7d      	ldr	r3, [pc, #500]	; (8001f48 <HAL_RCC_OscConfig+0xb40>)
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	4a7c      	ldr	r2, [pc, #496]	; (8001f48 <HAL_RCC_OscConfig+0xb40>)
 8001d58:	f023 0304 	bic.w	r3, r3, #4
 8001d5c:	6213      	str	r3, [r2, #32]
 8001d5e:	e020      	b.n	8001da2 <HAL_RCC_OscConfig+0x99a>
 8001d60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b05      	cmp	r3, #5
 8001d6e:	d10c      	bne.n	8001d8a <HAL_RCC_OscConfig+0x982>
 8001d70:	4b75      	ldr	r3, [pc, #468]	; (8001f48 <HAL_RCC_OscConfig+0xb40>)
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	4a74      	ldr	r2, [pc, #464]	; (8001f48 <HAL_RCC_OscConfig+0xb40>)
 8001d76:	f043 0304 	orr.w	r3, r3, #4
 8001d7a:	6213      	str	r3, [r2, #32]
 8001d7c:	4b72      	ldr	r3, [pc, #456]	; (8001f48 <HAL_RCC_OscConfig+0xb40>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	4a71      	ldr	r2, [pc, #452]	; (8001f48 <HAL_RCC_OscConfig+0xb40>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6213      	str	r3, [r2, #32]
 8001d88:	e00b      	b.n	8001da2 <HAL_RCC_OscConfig+0x99a>
 8001d8a:	4b6f      	ldr	r3, [pc, #444]	; (8001f48 <HAL_RCC_OscConfig+0xb40>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	4a6e      	ldr	r2, [pc, #440]	; (8001f48 <HAL_RCC_OscConfig+0xb40>)
 8001d90:	f023 0301 	bic.w	r3, r3, #1
 8001d94:	6213      	str	r3, [r2, #32]
 8001d96:	4b6c      	ldr	r3, [pc, #432]	; (8001f48 <HAL_RCC_OscConfig+0xb40>)
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	4a6b      	ldr	r2, [pc, #428]	; (8001f48 <HAL_RCC_OscConfig+0xb40>)
 8001d9c:	f023 0304 	bic.w	r3, r3, #4
 8001da0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001da2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 8081 	beq.w	8001eb6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db4:	f7ff f82c 	bl	8000e10 <HAL_GetTick>
 8001db8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dbc:	e00b      	b.n	8001dd6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dbe:	f7ff f827 	bl	8000e10 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e365      	b.n	80024a2 <HAL_RCC_OscConfig+0x109a>
 8001dd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dda:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001dde:	2202      	movs	r2, #2
 8001de0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	fa93 f2a3 	rbit	r2, r3
 8001df0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e02:	2202      	movs	r2, #2
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	fa93 f2a3 	rbit	r2, r3
 8001e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e18:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e1c:	601a      	str	r2, [r3, #0]
  return result;
 8001e1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e22:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e26:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e28:	fab3 f383 	clz	r3, r3
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	f043 0302 	orr.w	r3, r3, #2
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d102      	bne.n	8001e42 <HAL_RCC_OscConfig+0xa3a>
 8001e3c:	4b42      	ldr	r3, [pc, #264]	; (8001f48 <HAL_RCC_OscConfig+0xb40>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	e013      	b.n	8001e6a <HAL_RCC_OscConfig+0xa62>
 8001e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e46:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e52:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	fa93 f2a3 	rbit	r2, r3
 8001e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e60:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	4b38      	ldr	r3, [pc, #224]	; (8001f48 <HAL_RCC_OscConfig+0xb40>)
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e6e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001e72:	2102      	movs	r1, #2
 8001e74:	6011      	str	r1, [r2, #0]
 8001e76:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e7a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	fa92 f1a2 	rbit	r1, r2
 8001e84:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e88:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001e8c:	6011      	str	r1, [r2, #0]
  return result;
 8001e8e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e92:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	fab2 f282 	clz	r2, r2
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	f002 021f 	and.w	r2, r2, #31
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d084      	beq.n	8001dbe <HAL_RCC_OscConfig+0x9b6>
 8001eb4:	e083      	b.n	8001fbe <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb6:	f7fe ffab 	bl	8000e10 <HAL_GetTick>
 8001eba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ebe:	e00b      	b.n	8001ed8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec0:	f7fe ffa6 	bl	8000e10 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e2e4      	b.n	80024a2 <HAL_RCC_OscConfig+0x109a>
 8001ed8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001edc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	fa93 f2a3 	rbit	r2, r3
 8001ef2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f00:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f04:	2202      	movs	r2, #2
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f0c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	fa93 f2a3 	rbit	r2, r3
 8001f16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f1a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f1e:	601a      	str	r2, [r3, #0]
  return result;
 8001f20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f24:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f28:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	095b      	lsrs	r3, r3, #5
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f043 0302 	orr.w	r3, r3, #2
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d106      	bne.n	8001f4c <HAL_RCC_OscConfig+0xb44>
 8001f3e:	4b02      	ldr	r3, [pc, #8]	; (8001f48 <HAL_RCC_OscConfig+0xb40>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	e017      	b.n	8001f74 <HAL_RCC_OscConfig+0xb6c>
 8001f44:	40007000 	.word	0x40007000
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f50:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001f54:	2202      	movs	r2, #2
 8001f56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	fa93 f2a3 	rbit	r2, r3
 8001f66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f6a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	4bb3      	ldr	r3, [pc, #716]	; (8002240 <HAL_RCC_OscConfig+0xe38>)
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f78:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001f7c:	2102      	movs	r1, #2
 8001f7e:	6011      	str	r1, [r2, #0]
 8001f80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f84:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	fa92 f1a2 	rbit	r1, r2
 8001f8e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f92:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001f96:	6011      	str	r1, [r2, #0]
  return result;
 8001f98:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f9c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	fab2 f282 	clz	r2, r2
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	f002 021f 	and.w	r2, r2, #31
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d180      	bne.n	8001ec0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fbe:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d105      	bne.n	8001fd2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc6:	4b9e      	ldr	r3, [pc, #632]	; (8002240 <HAL_RCC_OscConfig+0xe38>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	4a9d      	ldr	r2, [pc, #628]	; (8002240 <HAL_RCC_OscConfig+0xe38>)
 8001fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 825e 	beq.w	80024a0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fe4:	4b96      	ldr	r3, [pc, #600]	; (8002240 <HAL_RCC_OscConfig+0xe38>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	f000 821f 	beq.w	8002430 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	f040 8170 	bne.w	80022e4 <HAL_RCC_OscConfig+0xedc>
 8002004:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002008:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800200c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002016:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	fa93 f2a3 	rbit	r2, r3
 8002020:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002024:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002028:	601a      	str	r2, [r3, #0]
  return result;
 800202a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800202e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002032:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002034:	fab3 f383 	clz	r3, r3
 8002038:	b2db      	uxtb	r3, r3
 800203a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800203e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	461a      	mov	r2, r3
 8002046:	2300      	movs	r3, #0
 8002048:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204a:	f7fe fee1 	bl	8000e10 <HAL_GetTick>
 800204e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002052:	e009      	b.n	8002068 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002054:	f7fe fedc 	bl	8000e10 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e21c      	b.n	80024a2 <HAL_RCC_OscConfig+0x109a>
 8002068:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800206c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002070:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002074:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800207a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	fa93 f2a3 	rbit	r2, r3
 8002084:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002088:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800208c:	601a      	str	r2, [r3, #0]
  return result;
 800208e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002092:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002096:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002098:	fab3 f383 	clz	r3, r3
 800209c:	b2db      	uxtb	r3, r3
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d102      	bne.n	80020b2 <HAL_RCC_OscConfig+0xcaa>
 80020ac:	4b64      	ldr	r3, [pc, #400]	; (8002240 <HAL_RCC_OscConfig+0xe38>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	e027      	b.n	8002102 <HAL_RCC_OscConfig+0xcfa>
 80020b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80020ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	fa93 f2a3 	rbit	r2, r3
 80020ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020dc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80020e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ea:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	fa93 f2a3 	rbit	r2, r3
 80020f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	4b50      	ldr	r3, [pc, #320]	; (8002240 <HAL_RCC_OscConfig+0xe38>)
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002106:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800210a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800210e:	6011      	str	r1, [r2, #0]
 8002110:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002114:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002118:	6812      	ldr	r2, [r2, #0]
 800211a:	fa92 f1a2 	rbit	r1, r2
 800211e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002122:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002126:	6011      	str	r1, [r2, #0]
  return result;
 8002128:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800212c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	fab2 f282 	clz	r2, r2
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	f042 0220 	orr.w	r2, r2, #32
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	f002 021f 	and.w	r2, r2, #31
 8002142:	2101      	movs	r1, #1
 8002144:	fa01 f202 	lsl.w	r2, r1, r2
 8002148:	4013      	ands	r3, r2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d182      	bne.n	8002054 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800214e:	4b3c      	ldr	r3, [pc, #240]	; (8002240 <HAL_RCC_OscConfig+0xe38>)
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	f023 020f 	bic.w	r2, r3, #15
 8002156:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800215a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	4937      	ldr	r1, [pc, #220]	; (8002240 <HAL_RCC_OscConfig+0xe38>)
 8002164:	4313      	orrs	r3, r2
 8002166:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002168:	4b35      	ldr	r3, [pc, #212]	; (8002240 <HAL_RCC_OscConfig+0xe38>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002170:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002174:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6a19      	ldr	r1, [r3, #32]
 800217c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002180:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	430b      	orrs	r3, r1
 800218a:	492d      	ldr	r1, [pc, #180]	; (8002240 <HAL_RCC_OscConfig+0xe38>)
 800218c:	4313      	orrs	r3, r2
 800218e:	604b      	str	r3, [r1, #4]
 8002190:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002194:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002198:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800219c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	fa93 f2a3 	rbit	r2, r3
 80021ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80021b4:	601a      	str	r2, [r3, #0]
  return result;
 80021b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ba:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80021be:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c0:	fab3 f383 	clz	r3, r3
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	461a      	mov	r2, r3
 80021d2:	2301      	movs	r3, #1
 80021d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d6:	f7fe fe1b 	bl	8000e10 <HAL_GetTick>
 80021da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021de:	e009      	b.n	80021f4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e0:	f7fe fe16 	bl	8000e10 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e156      	b.n	80024a2 <HAL_RCC_OscConfig+0x109a>
 80021f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80021fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002200:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002206:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	fa93 f2a3 	rbit	r2, r3
 8002210:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002214:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002218:	601a      	str	r2, [r3, #0]
  return result;
 800221a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800221e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002222:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002224:	fab3 f383 	clz	r3, r3
 8002228:	b2db      	uxtb	r3, r3
 800222a:	095b      	lsrs	r3, r3, #5
 800222c:	b2db      	uxtb	r3, r3
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b01      	cmp	r3, #1
 8002236:	d105      	bne.n	8002244 <HAL_RCC_OscConfig+0xe3c>
 8002238:	4b01      	ldr	r3, [pc, #4]	; (8002240 <HAL_RCC_OscConfig+0xe38>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	e02a      	b.n	8002294 <HAL_RCC_OscConfig+0xe8c>
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
 8002244:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002248:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800224c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002256:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	fa93 f2a3 	rbit	r2, r3
 8002260:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002264:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800226e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002272:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800227c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	fa93 f2a3 	rbit	r2, r3
 8002286:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800228a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	4b86      	ldr	r3, [pc, #536]	; (80024ac <HAL_RCC_OscConfig+0x10a4>)
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002298:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800229c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022a0:	6011      	str	r1, [r2, #0]
 80022a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022a6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	fa92 f1a2 	rbit	r1, r2
 80022b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022b4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80022b8:	6011      	str	r1, [r2, #0]
  return result;
 80022ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022be:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	fab2 f282 	clz	r2, r2
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	f042 0220 	orr.w	r2, r2, #32
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	f002 021f 	and.w	r2, r2, #31
 80022d4:	2101      	movs	r1, #1
 80022d6:	fa01 f202 	lsl.w	r2, r1, r2
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f43f af7f 	beq.w	80021e0 <HAL_RCC_OscConfig+0xdd8>
 80022e2:	e0dd      	b.n	80024a0 <HAL_RCC_OscConfig+0x1098>
 80022e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80022ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	fa93 f2a3 	rbit	r2, r3
 8002300:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002304:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002308:	601a      	str	r2, [r3, #0]
  return result;
 800230a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800230e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002312:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800231e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	461a      	mov	r2, r3
 8002326:	2300      	movs	r3, #0
 8002328:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7fe fd71 	bl	8000e10 <HAL_GetTick>
 800232e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002332:	e009      	b.n	8002348 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002334:	f7fe fd6c 	bl	8000e10 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e0ac      	b.n	80024a2 <HAL_RCC_OscConfig+0x109a>
 8002348:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800234c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002350:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002354:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800235a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	fa93 f2a3 	rbit	r2, r3
 8002364:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002368:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800236c:	601a      	str	r2, [r3, #0]
  return result;
 800236e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002372:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002376:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002378:	fab3 f383 	clz	r3, r3
 800237c:	b2db      	uxtb	r3, r3
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	b2db      	uxtb	r3, r3
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b01      	cmp	r3, #1
 800238a:	d102      	bne.n	8002392 <HAL_RCC_OscConfig+0xf8a>
 800238c:	4b47      	ldr	r3, [pc, #284]	; (80024ac <HAL_RCC_OscConfig+0x10a4>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	e027      	b.n	80023e2 <HAL_RCC_OscConfig+0xfda>
 8002392:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002396:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800239a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800239e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	fa93 f2a3 	rbit	r2, r3
 80023ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023bc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80023c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ca:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	fa93 f2a3 	rbit	r2, r3
 80023d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	4b33      	ldr	r3, [pc, #204]	; (80024ac <HAL_RCC_OscConfig+0x10a4>)
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023e6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80023ea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023ee:	6011      	str	r1, [r2, #0]
 80023f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023f4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80023f8:	6812      	ldr	r2, [r2, #0]
 80023fa:	fa92 f1a2 	rbit	r1, r2
 80023fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002402:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002406:	6011      	str	r1, [r2, #0]
  return result;
 8002408:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800240c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	fab2 f282 	clz	r2, r2
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	f042 0220 	orr.w	r2, r2, #32
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	f002 021f 	and.w	r2, r2, #31
 8002422:	2101      	movs	r1, #1
 8002424:	fa01 f202 	lsl.w	r2, r1, r2
 8002428:	4013      	ands	r3, r2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d182      	bne.n	8002334 <HAL_RCC_OscConfig+0xf2c>
 800242e:	e037      	b.n	80024a0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002430:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002434:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e02e      	b.n	80024a2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002444:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_RCC_OscConfig+0x10a4>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800244c:	4b17      	ldr	r3, [pc, #92]	; (80024ac <HAL_RCC_OscConfig+0x10a4>)
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002454:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002458:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800245c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002460:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	429a      	cmp	r2, r3
 800246a:	d117      	bne.n	800249c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800246c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002470:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002474:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002478:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002480:	429a      	cmp	r2, r3
 8002482:	d10b      	bne.n	800249c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002484:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002488:	f003 020f 	and.w	r2, r3, #15
 800248c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002490:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40021000 	.word	0x40021000

080024b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b09e      	sub	sp, #120	; 0x78
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e162      	b.n	800278e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024c8:	4b90      	ldr	r3, [pc, #576]	; (800270c <HAL_RCC_ClockConfig+0x25c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d910      	bls.n	80024f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b8d      	ldr	r3, [pc, #564]	; (800270c <HAL_RCC_ClockConfig+0x25c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 0207 	bic.w	r2, r3, #7
 80024de:	498b      	ldr	r1, [pc, #556]	; (800270c <HAL_RCC_ClockConfig+0x25c>)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b89      	ldr	r3, [pc, #548]	; (800270c <HAL_RCC_ClockConfig+0x25c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e14a      	b.n	800278e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002504:	4b82      	ldr	r3, [pc, #520]	; (8002710 <HAL_RCC_ClockConfig+0x260>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	497f      	ldr	r1, [pc, #508]	; (8002710 <HAL_RCC_ClockConfig+0x260>)
 8002512:	4313      	orrs	r3, r2
 8002514:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 80dc 	beq.w	80026dc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d13c      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xf6>
 800252c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002530:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002534:	fa93 f3a3 	rbit	r3, r3
 8002538:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800253a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253c:	fab3 f383 	clz	r3, r3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	b2db      	uxtb	r3, r3
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b01      	cmp	r3, #1
 800254e:	d102      	bne.n	8002556 <HAL_RCC_ClockConfig+0xa6>
 8002550:	4b6f      	ldr	r3, [pc, #444]	; (8002710 <HAL_RCC_ClockConfig+0x260>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	e00f      	b.n	8002576 <HAL_RCC_ClockConfig+0xc6>
 8002556:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800255a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	667b      	str	r3, [r7, #100]	; 0x64
 8002564:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002568:	663b      	str	r3, [r7, #96]	; 0x60
 800256a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800256c:	fa93 f3a3 	rbit	r3, r3
 8002570:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002572:	4b67      	ldr	r3, [pc, #412]	; (8002710 <HAL_RCC_ClockConfig+0x260>)
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800257a:	65ba      	str	r2, [r7, #88]	; 0x58
 800257c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800257e:	fa92 f2a2 	rbit	r2, r2
 8002582:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002584:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002586:	fab2 f282 	clz	r2, r2
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	f042 0220 	orr.w	r2, r2, #32
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	f002 021f 	and.w	r2, r2, #31
 8002596:	2101      	movs	r1, #1
 8002598:	fa01 f202 	lsl.w	r2, r1, r2
 800259c:	4013      	ands	r3, r2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d17b      	bne.n	800269a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e0f3      	b.n	800278e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d13c      	bne.n	8002628 <HAL_RCC_ClockConfig+0x178>
 80025ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	095b      	lsrs	r3, r3, #5
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d102      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x128>
 80025d2:	4b4f      	ldr	r3, [pc, #316]	; (8002710 <HAL_RCC_ClockConfig+0x260>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	e00f      	b.n	80025f8 <HAL_RCC_ClockConfig+0x148>
 80025d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	647b      	str	r3, [r7, #68]	; 0x44
 80025e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ea:	643b      	str	r3, [r7, #64]	; 0x40
 80025ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025f4:	4b46      	ldr	r3, [pc, #280]	; (8002710 <HAL_RCC_ClockConfig+0x260>)
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025fc:	63ba      	str	r2, [r7, #56]	; 0x38
 80025fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002600:	fa92 f2a2 	rbit	r2, r2
 8002604:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002608:	fab2 f282 	clz	r2, r2
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	f042 0220 	orr.w	r2, r2, #32
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	f002 021f 	and.w	r2, r2, #31
 8002618:	2101      	movs	r1, #1
 800261a:	fa01 f202 	lsl.w	r2, r1, r2
 800261e:	4013      	ands	r3, r2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d13a      	bne.n	800269a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0b2      	b.n	800278e <HAL_RCC_ClockConfig+0x2de>
 8002628:	2302      	movs	r3, #2
 800262a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262e:	fa93 f3a3 	rbit	r3, r3
 8002632:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002636:	fab3 f383 	clz	r3, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	095b      	lsrs	r3, r3, #5
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b01      	cmp	r3, #1
 8002648:	d102      	bne.n	8002650 <HAL_RCC_ClockConfig+0x1a0>
 800264a:	4b31      	ldr	r3, [pc, #196]	; (8002710 <HAL_RCC_ClockConfig+0x260>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	e00d      	b.n	800266c <HAL_RCC_ClockConfig+0x1bc>
 8002650:	2302      	movs	r3, #2
 8002652:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
 800265c:	2302      	movs	r3, #2
 800265e:	623b      	str	r3, [r7, #32]
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	61fb      	str	r3, [r7, #28]
 8002668:	4b29      	ldr	r3, [pc, #164]	; (8002710 <HAL_RCC_ClockConfig+0x260>)
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	2202      	movs	r2, #2
 800266e:	61ba      	str	r2, [r7, #24]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	fa92 f2a2 	rbit	r2, r2
 8002676:	617a      	str	r2, [r7, #20]
  return result;
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	fab2 f282 	clz	r2, r2
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	f042 0220 	orr.w	r2, r2, #32
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	f002 021f 	and.w	r2, r2, #31
 800268a:	2101      	movs	r1, #1
 800268c:	fa01 f202 	lsl.w	r2, r1, r2
 8002690:	4013      	ands	r3, r2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e079      	b.n	800278e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800269a:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <HAL_RCC_ClockConfig+0x260>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f023 0203 	bic.w	r2, r3, #3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	491a      	ldr	r1, [pc, #104]	; (8002710 <HAL_RCC_ClockConfig+0x260>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026ac:	f7fe fbb0 	bl	8000e10 <HAL_GetTick>
 80026b0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b2:	e00a      	b.n	80026ca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b4:	f7fe fbac 	bl	8000e10 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e061      	b.n	800278e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ca:	4b11      	ldr	r3, [pc, #68]	; (8002710 <HAL_RCC_ClockConfig+0x260>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 020c 	and.w	r2, r3, #12
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	429a      	cmp	r2, r3
 80026da:	d1eb      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_RCC_ClockConfig+0x25c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d214      	bcs.n	8002714 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4b08      	ldr	r3, [pc, #32]	; (800270c <HAL_RCC_ClockConfig+0x25c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 0207 	bic.w	r2, r3, #7
 80026f2:	4906      	ldr	r1, [pc, #24]	; (800270c <HAL_RCC_ClockConfig+0x25c>)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fa:	4b04      	ldr	r3, [pc, #16]	; (800270c <HAL_RCC_ClockConfig+0x25c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d005      	beq.n	8002714 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e040      	b.n	800278e <HAL_RCC_ClockConfig+0x2de>
 800270c:	40022000 	.word	0x40022000
 8002710:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002720:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <HAL_RCC_ClockConfig+0x2e8>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	491a      	ldr	r1, [pc, #104]	; (8002798 <HAL_RCC_ClockConfig+0x2e8>)
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800273e:	4b16      	ldr	r3, [pc, #88]	; (8002798 <HAL_RCC_ClockConfig+0x2e8>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4912      	ldr	r1, [pc, #72]	; (8002798 <HAL_RCC_ClockConfig+0x2e8>)
 800274e:	4313      	orrs	r3, r2
 8002750:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002752:	f000 f829 	bl	80027a8 <HAL_RCC_GetSysClockFreq>
 8002756:	4601      	mov	r1, r0
 8002758:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <HAL_RCC_ClockConfig+0x2e8>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002760:	22f0      	movs	r2, #240	; 0xf0
 8002762:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	fa92 f2a2 	rbit	r2, r2
 800276a:	60fa      	str	r2, [r7, #12]
  return result;
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	fab2 f282 	clz	r2, r2
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	40d3      	lsrs	r3, r2
 8002776:	4a09      	ldr	r2, [pc, #36]	; (800279c <HAL_RCC_ClockConfig+0x2ec>)
 8002778:	5cd3      	ldrb	r3, [r2, r3]
 800277a:	fa21 f303 	lsr.w	r3, r1, r3
 800277e:	4a08      	ldr	r2, [pc, #32]	; (80027a0 <HAL_RCC_ClockConfig+0x2f0>)
 8002780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002782:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <HAL_RCC_ClockConfig+0x2f4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f7fe fafe 	bl	8000d88 <HAL_InitTick>
  
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3778      	adds	r7, #120	; 0x78
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
 800279c:	08003790 	.word	0x08003790
 80027a0:	20000000 	.word	0x20000000
 80027a4:	20000004 	.word	0x20000004

080027a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b08b      	sub	sp, #44	; 0x2c
 80027ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	2300      	movs	r3, #0
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	2300      	movs	r3, #0
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80027c2:	4b2a      	ldr	r3, [pc, #168]	; (800286c <HAL_RCC_GetSysClockFreq+0xc4>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d002      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x30>
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d003      	beq.n	80027de <HAL_RCC_GetSysClockFreq+0x36>
 80027d6:	e03f      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027d8:	4b25      	ldr	r3, [pc, #148]	; (8002870 <HAL_RCC_GetSysClockFreq+0xc8>)
 80027da:	623b      	str	r3, [r7, #32]
      break;
 80027dc:	e03f      	b.n	800285e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80027e4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80027e8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	fa92 f2a2 	rbit	r2, r2
 80027f0:	607a      	str	r2, [r7, #4]
  return result;
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	fab2 f282 	clz	r2, r2
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	40d3      	lsrs	r3, r2
 80027fc:	4a1d      	ldr	r2, [pc, #116]	; (8002874 <HAL_RCC_GetSysClockFreq+0xcc>)
 80027fe:	5cd3      	ldrb	r3, [r2, r3]
 8002800:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002802:	4b1a      	ldr	r3, [pc, #104]	; (800286c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	220f      	movs	r2, #15
 800280c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	fa92 f2a2 	rbit	r2, r2
 8002814:	60fa      	str	r2, [r7, #12]
  return result;
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	fab2 f282 	clz	r2, r2
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	40d3      	lsrs	r3, r2
 8002820:	4a15      	ldr	r2, [pc, #84]	; (8002878 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002822:	5cd3      	ldrb	r3, [r2, r3]
 8002824:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002830:	4a0f      	ldr	r2, [pc, #60]	; (8002870 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	fbb2 f2f3 	udiv	r2, r2, r3
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	fb02 f303 	mul.w	r3, r2, r3
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
 8002840:	e007      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002842:	4a0b      	ldr	r2, [pc, #44]	; (8002870 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	fbb2 f2f3 	udiv	r2, r2, r3
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	fb02 f303 	mul.w	r3, r2, r3
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	623b      	str	r3, [r7, #32]
      break;
 8002856:	e002      	b.n	800285e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_RCC_GetSysClockFreq+0xc8>)
 800285a:	623b      	str	r3, [r7, #32]
      break;
 800285c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800285e:	6a3b      	ldr	r3, [r7, #32]
}
 8002860:	4618      	mov	r0, r3
 8002862:	372c      	adds	r7, #44	; 0x2c
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	40021000 	.word	0x40021000
 8002870:	007a1200 	.word	0x007a1200
 8002874:	080037a0 	.word	0x080037a0
 8002878:	080037b0 	.word	0x080037b0

0800287c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b092      	sub	sp, #72	; 0x48
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800288c:	2300      	movs	r3, #0
 800288e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 80d4 	beq.w	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a0:	4b4e      	ldr	r3, [pc, #312]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10e      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ac:	4b4b      	ldr	r3, [pc, #300]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	4a4a      	ldr	r2, [pc, #296]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b6:	61d3      	str	r3, [r2, #28]
 80028b8:	4b48      	ldr	r3, [pc, #288]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c4:	2301      	movs	r3, #1
 80028c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ca:	4b45      	ldr	r3, [pc, #276]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d118      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028d6:	4b42      	ldr	r3, [pc, #264]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a41      	ldr	r2, [pc, #260]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e2:	f7fe fa95 	bl	8000e10 <HAL_GetTick>
 80028e6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e8:	e008      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ea:	f7fe fa91 	bl	8000e10 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b64      	cmp	r3, #100	; 0x64
 80028f6:	d901      	bls.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e1d6      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fc:	4b38      	ldr	r3, [pc, #224]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002908:	4b34      	ldr	r3, [pc, #208]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002910:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 8084 	beq.w	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002922:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002924:	429a      	cmp	r2, r3
 8002926:	d07c      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002928:	4b2c      	ldr	r3, [pc, #176]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002930:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002932:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002936:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002942:	fab3 f383 	clz	r3, r3
 8002946:	b2db      	uxtb	r3, r3
 8002948:	461a      	mov	r2, r3
 800294a:	4b26      	ldr	r3, [pc, #152]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	461a      	mov	r2, r3
 8002952:	2301      	movs	r3, #1
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800295a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002966:	fab3 f383 	clz	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	461a      	mov	r2, r3
 8002976:	2300      	movs	r3, #0
 8002978:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800297a:	4a18      	ldr	r2, [pc, #96]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800297e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d04b      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298a:	f7fe fa41 	bl	8000e10 <HAL_GetTick>
 800298e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002990:	e00a      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002992:	f7fe fa3d 	bl	8000e10 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e180      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80029a8:	2302      	movs	r3, #2
 80029aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ae:	fa93 f3a3 	rbit	r3, r3
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
 80029b4:	2302      	movs	r3, #2
 80029b6:	623b      	str	r3, [r7, #32]
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	61fb      	str	r3, [r7, #28]
  return result;
 80029c0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f043 0302 	orr.w	r3, r3, #2
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d108      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80029d6:	4b01      	ldr	r3, [pc, #4]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	e00d      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80029dc:	40021000 	.word	0x40021000
 80029e0:	40007000 	.word	0x40007000
 80029e4:	10908100 	.word	0x10908100
 80029e8:	2302      	movs	r3, #2
 80029ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	4b9a      	ldr	r3, [pc, #616]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	2202      	movs	r2, #2
 80029fa:	613a      	str	r2, [r7, #16]
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	fa92 f2a2 	rbit	r2, r2
 8002a02:	60fa      	str	r2, [r7, #12]
  return result;
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	fab2 f282 	clz	r2, r2
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	f002 021f 	and.w	r2, r2, #31
 8002a16:	2101      	movs	r1, #1
 8002a18:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0b7      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a22:	4b8f      	ldr	r3, [pc, #572]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	498c      	ldr	r1, [pc, #560]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d105      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a3c:	4b88      	ldr	r3, [pc, #544]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	4a87      	ldr	r2, [pc, #540]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a46:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a54:	4b82      	ldr	r3, [pc, #520]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	f023 0203 	bic.w	r2, r3, #3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	497f      	ldr	r1, [pc, #508]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d008      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a72:	4b7b      	ldr	r3, [pc, #492]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	4978      	ldr	r1, [pc, #480]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a90:	4b73      	ldr	r3, [pc, #460]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	4970      	ldr	r1, [pc, #448]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d008      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aae:	4b6c      	ldr	r3, [pc, #432]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	f023 0210 	bic.w	r2, r3, #16
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	4969      	ldr	r1, [pc, #420]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002acc:	4b64      	ldr	r3, [pc, #400]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad8:	4961      	ldr	r1, [pc, #388]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d008      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002aea:	4b5d      	ldr	r3, [pc, #372]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f023 0220 	bic.w	r2, r3, #32
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	495a      	ldr	r1, [pc, #360]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b08:	4b55      	ldr	r3, [pc, #340]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	4952      	ldr	r1, [pc, #328]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d008      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b26:	4b4e      	ldr	r3, [pc, #312]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	494b      	ldr	r1, [pc, #300]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b44:	4b46      	ldr	r3, [pc, #280]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	4943      	ldr	r1, [pc, #268]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d008      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b62:	4b3f      	ldr	r3, [pc, #252]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	493c      	ldr	r1, [pc, #240]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b80:	4b37      	ldr	r3, [pc, #220]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	4934      	ldr	r1, [pc, #208]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d008      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002b9e:	4b30      	ldr	r3, [pc, #192]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	492d      	ldr	r1, [pc, #180]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002bbc:	4b28      	ldr	r3, [pc, #160]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc8:	4925      	ldr	r1, [pc, #148]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d008      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002bda:	4b21      	ldr	r3, [pc, #132]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	491e      	ldr	r1, [pc, #120]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002bf8:	4b19      	ldr	r3, [pc, #100]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c04:	4916      	ldr	r1, [pc, #88]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d008      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002c16:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c22:	490f      	ldr	r1, [pc, #60]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002c34:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c40:	4907      	ldr	r1, [pc, #28]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00c      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002c52:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	e002      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002c5e:	bf00      	nop
 8002c60:	40021000 	.word	0x40021000
 8002c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c66:	4913      	ldr	r1, [pc, #76]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002c78:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c84:	490b      	ldr	r1, [pc, #44]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d008      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002c96:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca2:	4904      	ldr	r1, [pc, #16]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3748      	adds	r7, #72	; 0x48
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40021000 	.word	0x40021000

08002cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e049      	b.n	8002d5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d106      	bne.n	8002ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7fd ffa6 	bl	8000c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	f000 fab8 	bl	800326c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d001      	beq.n	8002d80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e047      	b.n	8002e10 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a23      	ldr	r2, [pc, #140]	; (8002e1c <HAL_TIM_Base_Start+0xb4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d01d      	beq.n	8002dce <HAL_TIM_Base_Start+0x66>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d9a:	d018      	beq.n	8002dce <HAL_TIM_Base_Start+0x66>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a1f      	ldr	r2, [pc, #124]	; (8002e20 <HAL_TIM_Base_Start+0xb8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d013      	beq.n	8002dce <HAL_TIM_Base_Start+0x66>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a1e      	ldr	r2, [pc, #120]	; (8002e24 <HAL_TIM_Base_Start+0xbc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d00e      	beq.n	8002dce <HAL_TIM_Base_Start+0x66>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a1c      	ldr	r2, [pc, #112]	; (8002e28 <HAL_TIM_Base_Start+0xc0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d009      	beq.n	8002dce <HAL_TIM_Base_Start+0x66>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a1b      	ldr	r2, [pc, #108]	; (8002e2c <HAL_TIM_Base_Start+0xc4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d004      	beq.n	8002dce <HAL_TIM_Base_Start+0x66>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a19      	ldr	r2, [pc, #100]	; (8002e30 <HAL_TIM_Base_Start+0xc8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d115      	bne.n	8002dfa <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	4b17      	ldr	r3, [pc, #92]	; (8002e34 <HAL_TIM_Base_Start+0xcc>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b06      	cmp	r3, #6
 8002dde:	d015      	beq.n	8002e0c <HAL_TIM_Base_Start+0xa4>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de6:	d011      	beq.n	8002e0c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df8:	e008      	b.n	8002e0c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 0201 	orr.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	e000      	b.n	8002e0e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	40012c00 	.word	0x40012c00
 8002e20:	40000400 	.word	0x40000400
 8002e24:	40000800 	.word	0x40000800
 8002e28:	40013400 	.word	0x40013400
 8002e2c:	40014000 	.word	0x40014000
 8002e30:	40015000 	.word	0x40015000
 8002e34:	00010007 	.word	0x00010007

08002e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d122      	bne.n	8002e94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d11b      	bne.n	8002e94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f06f 0202 	mvn.w	r2, #2
 8002e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f9d8 	bl	8003230 <HAL_TIM_IC_CaptureCallback>
 8002e80:	e005      	b.n	8002e8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f9ca 	bl	800321c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f9db 	bl	8003244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d122      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d11b      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f06f 0204 	mvn.w	r2, #4
 8002eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f9ae 	bl	8003230 <HAL_TIM_IC_CaptureCallback>
 8002ed4:	e005      	b.n	8002ee2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f9a0 	bl	800321c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f9b1 	bl	8003244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d122      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d11b      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0208 	mvn.w	r2, #8
 8002f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2204      	movs	r2, #4
 8002f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f984 	bl	8003230 <HAL_TIM_IC_CaptureCallback>
 8002f28:	e005      	b.n	8002f36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f976 	bl	800321c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f987 	bl	8003244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b10      	cmp	r3, #16
 8002f48:	d122      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0310 	and.w	r3, r3, #16
 8002f54:	2b10      	cmp	r3, #16
 8002f56:	d11b      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0210 	mvn.w	r2, #16
 8002f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2208      	movs	r2, #8
 8002f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f95a 	bl	8003230 <HAL_TIM_IC_CaptureCallback>
 8002f7c:	e005      	b.n	8002f8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f94c 	bl	800321c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f95d 	bl	8003244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d10e      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d107      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0201 	mvn.w	r2, #1
 8002fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f926 	bl	8003208 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc6:	2b80      	cmp	r3, #128	; 0x80
 8002fc8:	d10e      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd4:	2b80      	cmp	r3, #128	; 0x80
 8002fd6:	d107      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fb10 	bl	8003608 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff6:	d10e      	bne.n	8003016 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003002:	2b80      	cmp	r3, #128	; 0x80
 8003004:	d107      	bne.n	8003016 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800300e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 fb03 	bl	800361c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003020:	2b40      	cmp	r3, #64	; 0x40
 8003022:	d10e      	bne.n	8003042 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302e:	2b40      	cmp	r3, #64	; 0x40
 8003030:	d107      	bne.n	8003042 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800303a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f90b 	bl	8003258 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	f003 0320 	and.w	r3, r3, #32
 800304c:	2b20      	cmp	r3, #32
 800304e:	d10e      	bne.n	800306e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	2b20      	cmp	r3, #32
 800305c:	d107      	bne.n	800306e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f06f 0220 	mvn.w	r2, #32
 8003066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 fac3 	bl	80035f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_TIM_ConfigClockSource+0x1c>
 800308e:	2302      	movs	r3, #2
 8003090:	e0b6      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x18a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2202      	movs	r2, #2
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030bc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ce:	d03e      	beq.n	800314e <HAL_TIM_ConfigClockSource+0xd8>
 80030d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d4:	f200 8087 	bhi.w	80031e6 <HAL_TIM_ConfigClockSource+0x170>
 80030d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030dc:	f000 8086 	beq.w	80031ec <HAL_TIM_ConfigClockSource+0x176>
 80030e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e4:	d87f      	bhi.n	80031e6 <HAL_TIM_ConfigClockSource+0x170>
 80030e6:	2b70      	cmp	r3, #112	; 0x70
 80030e8:	d01a      	beq.n	8003120 <HAL_TIM_ConfigClockSource+0xaa>
 80030ea:	2b70      	cmp	r3, #112	; 0x70
 80030ec:	d87b      	bhi.n	80031e6 <HAL_TIM_ConfigClockSource+0x170>
 80030ee:	2b60      	cmp	r3, #96	; 0x60
 80030f0:	d050      	beq.n	8003194 <HAL_TIM_ConfigClockSource+0x11e>
 80030f2:	2b60      	cmp	r3, #96	; 0x60
 80030f4:	d877      	bhi.n	80031e6 <HAL_TIM_ConfigClockSource+0x170>
 80030f6:	2b50      	cmp	r3, #80	; 0x50
 80030f8:	d03c      	beq.n	8003174 <HAL_TIM_ConfigClockSource+0xfe>
 80030fa:	2b50      	cmp	r3, #80	; 0x50
 80030fc:	d873      	bhi.n	80031e6 <HAL_TIM_ConfigClockSource+0x170>
 80030fe:	2b40      	cmp	r3, #64	; 0x40
 8003100:	d058      	beq.n	80031b4 <HAL_TIM_ConfigClockSource+0x13e>
 8003102:	2b40      	cmp	r3, #64	; 0x40
 8003104:	d86f      	bhi.n	80031e6 <HAL_TIM_ConfigClockSource+0x170>
 8003106:	2b30      	cmp	r3, #48	; 0x30
 8003108:	d064      	beq.n	80031d4 <HAL_TIM_ConfigClockSource+0x15e>
 800310a:	2b30      	cmp	r3, #48	; 0x30
 800310c:	d86b      	bhi.n	80031e6 <HAL_TIM_ConfigClockSource+0x170>
 800310e:	2b20      	cmp	r3, #32
 8003110:	d060      	beq.n	80031d4 <HAL_TIM_ConfigClockSource+0x15e>
 8003112:	2b20      	cmp	r3, #32
 8003114:	d867      	bhi.n	80031e6 <HAL_TIM_ConfigClockSource+0x170>
 8003116:	2b00      	cmp	r3, #0
 8003118:	d05c      	beq.n	80031d4 <HAL_TIM_ConfigClockSource+0x15e>
 800311a:	2b10      	cmp	r3, #16
 800311c:	d05a      	beq.n	80031d4 <HAL_TIM_ConfigClockSource+0x15e>
 800311e:	e062      	b.n	80031e6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003130:	f000 f9b4 	bl	800349c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003142:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	609a      	str	r2, [r3, #8]
      break;
 800314c:	e04f      	b.n	80031ee <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800315e:	f000 f99d 	bl	800349c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003170:	609a      	str	r2, [r3, #8]
      break;
 8003172:	e03c      	b.n	80031ee <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003180:	461a      	mov	r2, r3
 8003182:	f000 f911 	bl	80033a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2150      	movs	r1, #80	; 0x50
 800318c:	4618      	mov	r0, r3
 800318e:	f000 f96a 	bl	8003466 <TIM_ITRx_SetConfig>
      break;
 8003192:	e02c      	b.n	80031ee <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031a0:	461a      	mov	r2, r3
 80031a2:	f000 f930 	bl	8003406 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2160      	movs	r1, #96	; 0x60
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 f95a 	bl	8003466 <TIM_ITRx_SetConfig>
      break;
 80031b2:	e01c      	b.n	80031ee <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031c0:	461a      	mov	r2, r3
 80031c2:	f000 f8f1 	bl	80033a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2140      	movs	r1, #64	; 0x40
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 f94a 	bl	8003466 <TIM_ITRx_SetConfig>
      break;
 80031d2:	e00c      	b.n	80031ee <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4619      	mov	r1, r3
 80031de:	4610      	mov	r0, r2
 80031e0:	f000 f941 	bl	8003466 <TIM_ITRx_SetConfig>
      break;
 80031e4:	e003      	b.n	80031ee <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
      break;
 80031ea:	e000      	b.n	80031ee <HAL_TIM_ConfigClockSource+0x178>
      break;
 80031ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a42      	ldr	r2, [pc, #264]	; (8003388 <TIM_Base_SetConfig+0x11c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d013      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328a:	d00f      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a3f      	ldr	r2, [pc, #252]	; (800338c <TIM_Base_SetConfig+0x120>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00b      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a3e      	ldr	r2, [pc, #248]	; (8003390 <TIM_Base_SetConfig+0x124>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d007      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a3d      	ldr	r2, [pc, #244]	; (8003394 <TIM_Base_SetConfig+0x128>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d003      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a3c      	ldr	r2, [pc, #240]	; (8003398 <TIM_Base_SetConfig+0x12c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d108      	bne.n	80032be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a31      	ldr	r2, [pc, #196]	; (8003388 <TIM_Base_SetConfig+0x11c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d01f      	beq.n	8003306 <TIM_Base_SetConfig+0x9a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032cc:	d01b      	beq.n	8003306 <TIM_Base_SetConfig+0x9a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a2e      	ldr	r2, [pc, #184]	; (800338c <TIM_Base_SetConfig+0x120>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d017      	beq.n	8003306 <TIM_Base_SetConfig+0x9a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a2d      	ldr	r2, [pc, #180]	; (8003390 <TIM_Base_SetConfig+0x124>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d013      	beq.n	8003306 <TIM_Base_SetConfig+0x9a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a2c      	ldr	r2, [pc, #176]	; (8003394 <TIM_Base_SetConfig+0x128>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00f      	beq.n	8003306 <TIM_Base_SetConfig+0x9a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a2c      	ldr	r2, [pc, #176]	; (800339c <TIM_Base_SetConfig+0x130>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00b      	beq.n	8003306 <TIM_Base_SetConfig+0x9a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a2b      	ldr	r2, [pc, #172]	; (80033a0 <TIM_Base_SetConfig+0x134>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d007      	beq.n	8003306 <TIM_Base_SetConfig+0x9a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a2a      	ldr	r2, [pc, #168]	; (80033a4 <TIM_Base_SetConfig+0x138>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d003      	beq.n	8003306 <TIM_Base_SetConfig+0x9a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a25      	ldr	r2, [pc, #148]	; (8003398 <TIM_Base_SetConfig+0x12c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d108      	bne.n	8003318 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800330c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	4313      	orrs	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a12      	ldr	r2, [pc, #72]	; (8003388 <TIM_Base_SetConfig+0x11c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d013      	beq.n	800336c <TIM_Base_SetConfig+0x100>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a13      	ldr	r2, [pc, #76]	; (8003394 <TIM_Base_SetConfig+0x128>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d00f      	beq.n	800336c <TIM_Base_SetConfig+0x100>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a13      	ldr	r2, [pc, #76]	; (800339c <TIM_Base_SetConfig+0x130>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00b      	beq.n	800336c <TIM_Base_SetConfig+0x100>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a12      	ldr	r2, [pc, #72]	; (80033a0 <TIM_Base_SetConfig+0x134>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d007      	beq.n	800336c <TIM_Base_SetConfig+0x100>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a11      	ldr	r2, [pc, #68]	; (80033a4 <TIM_Base_SetConfig+0x138>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d003      	beq.n	800336c <TIM_Base_SetConfig+0x100>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a0c      	ldr	r2, [pc, #48]	; (8003398 <TIM_Base_SetConfig+0x12c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d103      	bne.n	8003374 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	615a      	str	r2, [r3, #20]
}
 800337a:	bf00      	nop
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40012c00 	.word	0x40012c00
 800338c:	40000400 	.word	0x40000400
 8003390:	40000800 	.word	0x40000800
 8003394:	40013400 	.word	0x40013400
 8003398:	40015000 	.word	0x40015000
 800339c:	40014000 	.word	0x40014000
 80033a0:	40014400 	.word	0x40014400
 80033a4:	40014800 	.word	0x40014800

080033a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f023 0201 	bic.w	r2, r3, #1
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f023 030a 	bic.w	r3, r3, #10
 80033e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	621a      	str	r2, [r3, #32]
}
 80033fa:	bf00      	nop
 80033fc:	371c      	adds	r7, #28
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003406:	b480      	push	{r7}
 8003408:	b087      	sub	sp, #28
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	f023 0210 	bic.w	r2, r3, #16
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003430:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	031b      	lsls	r3, r3, #12
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	4313      	orrs	r3, r2
 800343a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003442:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	621a      	str	r2, [r3, #32]
}
 800345a:	bf00      	nop
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003466:	b480      	push	{r7}
 8003468:	b085      	sub	sp, #20
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	f043 0307 	orr.w	r3, r3, #7
 8003488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	609a      	str	r2, [r3, #8]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	021a      	lsls	r2, r3, #8
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	431a      	orrs	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	609a      	str	r2, [r3, #8]
}
 80034d0:	bf00      	nop
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e06d      	b.n	80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a30      	ldr	r2, [pc, #192]	; (80035dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d009      	beq.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a2f      	ldr	r2, [pc, #188]	; (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d004      	beq.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a2d      	ldr	r2, [pc, #180]	; (80035e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d108      	bne.n	8003544 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003538:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a1e      	ldr	r2, [pc, #120]	; (80035dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d01d      	beq.n	80035a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003570:	d018      	beq.n	80035a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1c      	ldr	r2, [pc, #112]	; (80035e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d013      	beq.n	80035a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1a      	ldr	r2, [pc, #104]	; (80035ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00e      	beq.n	80035a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a15      	ldr	r2, [pc, #84]	; (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d009      	beq.n	80035a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a16      	ldr	r2, [pc, #88]	; (80035f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d004      	beq.n	80035a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a11      	ldr	r2, [pc, #68]	; (80035e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d10c      	bne.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	40012c00 	.word	0x40012c00
 80035e0:	40013400 	.word	0x40013400
 80035e4:	40015000 	.word	0x40015000
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40000800 	.word	0x40000800
 80035f0:	40014000 	.word	0x40014000

080035f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <memset>:
 8003630:	4402      	add	r2, r0
 8003632:	4603      	mov	r3, r0
 8003634:	4293      	cmp	r3, r2
 8003636:	d100      	bne.n	800363a <memset+0xa>
 8003638:	4770      	bx	lr
 800363a:	f803 1b01 	strb.w	r1, [r3], #1
 800363e:	e7f9      	b.n	8003634 <memset+0x4>

08003640 <__libc_init_array>:
 8003640:	b570      	push	{r4, r5, r6, lr}
 8003642:	4d0d      	ldr	r5, [pc, #52]	; (8003678 <__libc_init_array+0x38>)
 8003644:	4c0d      	ldr	r4, [pc, #52]	; (800367c <__libc_init_array+0x3c>)
 8003646:	1b64      	subs	r4, r4, r5
 8003648:	10a4      	asrs	r4, r4, #2
 800364a:	2600      	movs	r6, #0
 800364c:	42a6      	cmp	r6, r4
 800364e:	d109      	bne.n	8003664 <__libc_init_array+0x24>
 8003650:	4d0b      	ldr	r5, [pc, #44]	; (8003680 <__libc_init_array+0x40>)
 8003652:	4c0c      	ldr	r4, [pc, #48]	; (8003684 <__libc_init_array+0x44>)
 8003654:	f000 f818 	bl	8003688 <_init>
 8003658:	1b64      	subs	r4, r4, r5
 800365a:	10a4      	asrs	r4, r4, #2
 800365c:	2600      	movs	r6, #0
 800365e:	42a6      	cmp	r6, r4
 8003660:	d105      	bne.n	800366e <__libc_init_array+0x2e>
 8003662:	bd70      	pop	{r4, r5, r6, pc}
 8003664:	f855 3b04 	ldr.w	r3, [r5], #4
 8003668:	4798      	blx	r3
 800366a:	3601      	adds	r6, #1
 800366c:	e7ee      	b.n	800364c <__libc_init_array+0xc>
 800366e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003672:	4798      	blx	r3
 8003674:	3601      	adds	r6, #1
 8003676:	e7f2      	b.n	800365e <__libc_init_array+0x1e>
 8003678:	080037c0 	.word	0x080037c0
 800367c:	080037c0 	.word	0x080037c0
 8003680:	080037c0 	.word	0x080037c0
 8003684:	080037c4 	.word	0x080037c4

08003688 <_init>:
 8003688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368a:	bf00      	nop
 800368c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800368e:	bc08      	pop	{r3}
 8003690:	469e      	mov	lr, r3
 8003692:	4770      	bx	lr

08003694 <_fini>:
 8003694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003696:	bf00      	nop
 8003698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800369a:	bc08      	pop	{r3}
 800369c:	469e      	mov	lr, r3
 800369e:	4770      	bx	lr
